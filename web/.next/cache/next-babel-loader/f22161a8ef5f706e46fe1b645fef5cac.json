{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\nconst defaultValues = {\n  angle: \"\",\n  brand: \"\",\n  cases: [{\n    material: \"\"\n  }],\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: null,\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  layoutSupport: [{\n    value: \"\"\n  }],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  plates: [{\n    material: \"\"\n  }],\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false\n};\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues\n});\nconst setString = selector({\n  key: \"setString\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: event.target.value\n      });\n    });\n  }\n});\nconst changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event, idx) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      const oldColors = _objectSpread({}, keyboardFormStore.colors);\n\n      const newColors = [];\n      Object.entries(oldColors).map(s => {\n        const yes = s[event.target.tabIndex] = event.target.value;\n        newColors.push(yes);\n      });\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        colors: newColors\n      });\n    });\n  }\n});\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: Boolean(event.target.value)\n      });\n    });\n  }\n});\nconst setObjArray = selector({\n  key: \"setObjArray\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      let idx = event.target.tabIndex;\n      const pushObj = {\n        [idx]: event.target.value\n      };\n      const newArr = [];\n      const pushToArr = newArr.push(pushObj);\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: pushToArr\n      });\n    });\n  }\n});\nconst pushObjToArray = selector({\n  key: \"setObjArray\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      const where = event.target.name;\n      const newArr = [...keyboardFormStore.layoutSupport, {\n        value: \"test\"\n      }];\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: newArr\n      });\n    });\n  }\n});\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  changeStringInArray: useSetRecoilState(changeStringInArray),\n  setBoolean: useSetRecoilState(setBoolean),\n  setObjArray: useSetRecoilState(setObjArray),\n  pushObjToArray: useSetRecoilState(pushObjToArray)\n});","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/lib/keyboardFormStore.ts"],"names":["atom","selector","useRecoilValue","useSetRecoilState","defaultValues","angle","brand","cases","material","colors","connection","editions","extraPcbs","extraPlates","firmware","images","layouts","layoutSupport","value","mount","name","notes","pcb","plates","size","switchSupport","errors","keyboardFormStore","key","default","setString","get","set","event","target","changeStringInArray","idx","oldColors","newColors","Object","entries","map","s","yes","tabIndex","push","setBoolean","Boolean","setObjArray","pushObj","newArr","pushToArr","pushObjToArray","where","useKeyboardForm","values"],"mappings":"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","sourcesContent":["import { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\n\ninterface IPlate {\n  material: string;\n  price?: string;\n}\n\ninterface ICase {\n  material: string;\n  price?: string;\n}\n\ninterface IKeyboardForm {\n  // part 1\n  angle: string;\n  brand: string;\n  colors: string[] | null;\n  connection?: string;\n  firmware?: string;\n  mount: string;\n  name: string;\n  pcb?: string;\n  size: string;\n  layouts: string[] | null;\n  layoutSupport: any[] | null;\n\n  // part 2\n  extraPcbs: boolean;\n  extraPlates: boolean;\n  switchSupport?: string[] | null;\n  editions: string[] | null;\n  cases: ICase[];\n  plates: IPlate[];\n\n  // part 3\n  notes: string[];\n  images: string[];\n  errors?: boolean;\n}\n\nconst defaultValues: IKeyboardForm = {\n  angle: \"\",\n  brand: \"\",\n  cases: [{ material: \"\" }],\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: null,\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  layoutSupport: [{ value: \"\" }],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  plates: [{ material: \"\" }],\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false,\n};\n\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues,\n});\n\nconst setString = selector({\n  key: \"setString\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return { ...keyboardFormStore, [event.target.name]: event.target.value };\n    });\n  },\n});\n\nconst changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event, idx) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const oldColors = { ...keyboardFormStore.colors };\n\n      const newColors = [];\n\n      Object.entries(oldColors).map((s) => {\n        const yes = (s[event.target.tabIndex] = event.target.value);\n        newColors.push(yes);\n      });\n\n      return {\n        ...keyboardFormStore,\n        colors: newColors,\n      };\n    });\n  },\n});\n\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: Boolean(event.target.value),\n      };\n    });\n  },\n});\n\nconst setObjArray = selector({\n  key: \"setObjArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      let idx = event.target.tabIndex;\n      const pushObj = {\n        [idx]: event.target.value,\n      };\n      const newArr = [];\n      const pushToArr = newArr.push(pushObj);\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: pushToArr,\n      };\n    });\n  },\n});\n\nconst pushObjToArray = selector({\n  key: \"setObjArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const where = event.target.name;\n      const newArr = [...keyboardFormStore.layoutSupport, { value: \"test\" }];\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: newArr,\n      };\n    });\n  },\n});\n\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  changeStringInArray: useSetRecoilState(changeStringInArray),\n  setBoolean: useSetRecoilState(setBoolean),\n  setObjArray: useSetRecoilState(setObjArray),\n  pushObjToArray: useSetRecoilState(pushObjToArray),\n});\n"]},"metadata":{},"sourceType":"module"}