{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\nvar defaultValues = {\n  angle: \"\",\n  brand: \"\",\n  cases: [{\n    material: \"\"\n  }],\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: null,\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  layoutSupport: [{\n    value: \"\"\n  }],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  plates: [{\n    material: \"\"\n  }],\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false\n};\nvar keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  \"default\": defaultValues\n});\nvar setString = selector({\n  key: \"setString\",\n  get: function get(_ref) {\n    var _get = _ref.get;\n    return _get(keyboardFormStore);\n  },\n  set: function set(_ref2, event) {\n    var _set = _ref2.set;\n\n    _set(keyboardFormStore, function (keyboardFormStore) {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, _defineProperty({}, event.target.name, event.target.value));\n    });\n  }\n});\nvar changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: function get(_ref3) {\n    var _get2 = _ref3.get;\n    return _get2(keyboardFormStore);\n  },\n  set: function set(_ref4, event, idx) {\n    var _set2 = _ref4.set;\n\n    _set2(keyboardFormStore, function (keyboardFormStore) {\n      var oldColors = _objectSpread({}, keyboardFormStore.colors);\n\n      var newColors = [];\n      Object.entries(oldColors).map(function (s) {\n        var yes = s[event.target.tabIndex] = event.target.value;\n        newColors.push(yes);\n      });\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        colors: newColors\n      });\n    });\n  }\n});\nvar setBoolean = selector({\n  key: \"setBoolean\",\n  get: function get(_ref5) {\n    var _get3 = _ref5.get;\n    return _get3(keyboardFormStore);\n  },\n  set: function set(_ref6, event) {\n    var _set3 = _ref6.set;\n\n    _set3(keyboardFormStore, function (keyboardFormStore) {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, _defineProperty({}, event.target.name, Boolean(event.target.value)));\n    });\n  }\n});\nvar setObjArray = selector({\n  key: \"setObjArray\",\n  get: function get(_ref7) {\n    var _get4 = _ref7.get;\n    return _get4(keyboardFormStore);\n  },\n  set: function set(_ref8, event) {\n    var _set4 = _ref8.set;\n\n    _set4(keyboardFormStore, function (keyboardFormStore) {\n      var idx = event.target.tabIndex;\n\n      var pushObj = _defineProperty({}, idx, event.target.value);\n\n      var newArr = [];\n      var pushToArr = newArr.push(pushObj);\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, _defineProperty({}, event.target.name, pushToArr));\n    });\n  }\n});\nvar pushObjToArray = selector({\n  key: \"setObjArray\",\n  get: function get(_ref9) {\n    var _get5 = _ref9.get;\n    return _get5(keyboardFormStore);\n  },\n  set: function set(_ref10, event) {\n    var _set5 = _ref10.set;\n\n    _set5(keyboardFormStore, function (keyboardFormStore) {\n      var newArr = [];\n\n      if (event.target.name === \"layoutSupport\") {\n        newArr.push({\n          value: \"test\"\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, _defineProperty({}, event.target.name, newArr));\n    });\n  }\n});\nexport var useKeyboardForm = function useKeyboardForm() {\n  _s();\n\n  return {\n    values: useRecoilValue(keyboardFormStore),\n    setString: useSetRecoilState(setString),\n    changeStringInArray: useSetRecoilState(changeStringInArray),\n    setBoolean: useSetRecoilState(setBoolean),\n    setObjArray: useSetRecoilState(setObjArray),\n    pushObjToArray: useSetRecoilState(pushObjToArray)\n  };\n};\n\n_s(useKeyboardForm, \"YufcRDx8j98uN4mHUp+K6WMQGvs=\", false, function () {\n  return [useRecoilValue, useSetRecoilState, useSetRecoilState, useSetRecoilState, useSetRecoilState, useSetRecoilState];\n});","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/lib/keyboardFormStore.ts"],"names":["atom","selector","useRecoilValue","useSetRecoilState","defaultValues","angle","brand","cases","material","colors","connection","editions","extraPcbs","extraPlates","firmware","images","layouts","layoutSupport","value","mount","name","notes","pcb","plates","size","switchSupport","errors","keyboardFormStore","key","setString","get","set","event","target","changeStringInArray","idx","oldColors","newColors","Object","entries","map","s","yes","tabIndex","push","setBoolean","Boolean","setObjArray","pushObj","newArr","pushToArr","pushObjToArray","useKeyboardForm","values"],"mappings":"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","sourcesContent":["import { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\n\ninterface IPlate {\n  material: string;\n  price?: string;\n}\n\ninterface ICase {\n  material: string;\n  price?: string;\n}\n\ninterface IKeyboardForm {\n  // part 1\n  angle: string;\n  brand: string;\n  colors: string[] | null;\n  connection?: string;\n  firmware?: string;\n  mount: string;\n  name: string;\n  pcb?: string;\n  size: string;\n  layouts: string[] | null;\n  layoutSupport: any[] | null;\n\n  // part 2\n  extraPcbs: boolean;\n  extraPlates: boolean;\n  switchSupport?: string[] | null;\n  editions: string[] | null;\n  cases: ICase[];\n  plates: IPlate[];\n\n  // part 3\n  notes: string[];\n  images: string[];\n  errors?: boolean;\n}\n\nconst defaultValues: IKeyboardForm = {\n  angle: \"\",\n  brand: \"\",\n  cases: [{ material: \"\" }],\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: null,\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  layoutSupport: [{ value: \"\" }],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  plates: [{ material: \"\" }],\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false,\n};\n\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues,\n});\n\nconst setString = selector({\n  key: \"setString\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return { ...keyboardFormStore, [event.target.name]: event.target.value };\n    });\n  },\n});\n\nconst changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event, idx) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const oldColors = { ...keyboardFormStore.colors };\n\n      const newColors = [];\n\n      Object.entries(oldColors).map((s) => {\n        const yes = (s[event.target.tabIndex] = event.target.value);\n        newColors.push(yes);\n      });\n\n      return {\n        ...keyboardFormStore,\n        colors: newColors,\n      };\n    });\n  },\n});\n\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: Boolean(event.target.value),\n      };\n    });\n  },\n});\n\nconst setObjArray = selector({\n  key: \"setObjArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      let idx = event.target.tabIndex;\n      const pushObj = {\n        [idx]: event.target.value,\n      };\n      const newArr = [];\n      const pushToArr = newArr.push(pushObj);\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: pushToArr,\n      };\n    });\n  },\n});\n\nconst pushObjToArray = selector({\n  key: \"setObjArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const newArr = [];\n      if (event.target.name === \"layoutSupport\") {\n        newArr.push({ value: \"test\" });\n      }\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: newArr,\n      };\n    });\n  },\n});\n\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  changeStringInArray: useSetRecoilState(changeStringInArray),\n  setBoolean: useSetRecoilState(setBoolean),\n  setObjArray: useSetRecoilState(setObjArray),\n  pushObjToArray: useSetRecoilState(pushObjToArray),\n});\n"]},"metadata":{},"sourceType":"module"}