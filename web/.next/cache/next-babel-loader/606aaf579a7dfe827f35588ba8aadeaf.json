{"ast":null,"code":"var _jsxFileName = \"/Users/rsbear/projects/typefeel/web/components/KeyboardFormSteps/StepOne.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useKeyboardForm } from \"../../lib/keyboardFormStore\";\nimport { Flex } from \"@rsbear/betsy\";\n\nconst StepOne = ({\n  steps,\n  setStepOneComplete\n}) => {\n  const {\n    values,\n    setString\n  } = useKeyboardForm();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"name & brand\"), __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Name\",\n    name: \"name\",\n    value: values.name,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"brand\",\n    name: \"brand\",\n    value: values.brand,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  })), __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"size\",\n    name: \"size\",\n    value: values.size,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"mount\",\n    name: \"mount\",\n    value: values.mount,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"typing angle\",\n    name: \"angle\",\n    value: values.angle,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })), __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"connection\",\n    name: \"connection\",\n    value: values.connection,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"pcb\",\n    name: \"pcb\",\n    value: values.pcb,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"firmware\",\n    name: \"firmware\",\n    value: values.firmware,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"do you want to provide colors\"), __jsx(\"button\", {\n    onClick: () => setStepOneComplete(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"next\"));\n};\n\nexport default StepOne;","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/components/KeyboardFormSteps/StepOne.tsx"],"names":["useKeyboardForm","Flex","StepOne","steps","setStepOneComplete","values","setString","name","e","brand","size","mount","angle","connection","pcb","firmware"],"mappings":"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","sourcesContent":["import { FC } from \"react\";\nimport { useKeyboardForm } from \"../../lib/keyboardFormStore\";\nimport { Flex } from \"@rsbear/betsy\";\n\ninterface P {\n  steps: { one: boolean; two: boolean; three: false };\n  setStepOneComplete: Function;\n}\n\nconst StepOne: FC<P> = ({ steps, setStepOneComplete }) => {\n  const { values, setString } = useKeyboardForm();\n\n  return (\n    <div>\n      <p>name & brand</p>\n      <Flex>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          name=\"name\"\n          value={values.name}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"brand\"\n          name=\"brand\"\n          value={values.brand}\n          onChange={(e) => setString(e)}\n        />\n      </Flex>\n\n      <Flex>\n        <input\n          type=\"text\"\n          placeholder=\"size\"\n          name=\"size\"\n          value={values.size}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"mount\"\n          name=\"mount\"\n          value={values.mount}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"typing angle\"\n          name=\"angle\"\n          value={values.angle}\n          onChange={(e) => setString(e)}\n        />\n      </Flex>\n\n      <Flex>\n        <input\n          type=\"text\"\n          placeholder=\"connection\"\n          name=\"connection\"\n          value={values.connection}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"pcb\"\n          name=\"pcb\"\n          value={values.pcb}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"firmware\"\n          name=\"firmware\"\n          value={values.firmware}\n          onChange={(e) => setString(e)}\n        />\n      </Flex>\n\n      <p>do you want to provide colors</p>\n\n      <button onClick={() => setStepOneComplete()}>next</button>\n    </div>\n  );\n};\n\nexport default StepOne;\n"]},"metadata":{},"sourceType":"module"}