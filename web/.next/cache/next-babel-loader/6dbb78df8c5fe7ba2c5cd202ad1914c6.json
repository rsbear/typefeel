{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\nvar defaultValues = {\n  angle: \"\",\n  colors: [\"dffsdfsdf\"],\n  connector: \"\",\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  layout: [\"\"],\n  mount: \"\",\n  name: \"\",\n  pcb: \"\",\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false\n};\nvar keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  \"default\": defaultValues\n});\nvar setString = selector({\n  key: \"setString\",\n  get: function get(_ref) {\n    var _get = _ref.get;\n    return _get(keyboardFormStore);\n  },\n  set: function set(_ref2, event) {\n    var _set = _ref2.set;\n\n    _set(keyboardFormStore, function (keyboardFormStore) {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, _defineProperty({}, event.target.name, event.target.value));\n    });\n  }\n});\nvar addStringToArray = selector({\n  key: \"addStringToArray\",\n  get: function get(_ref3) {\n    var _get2 = _ref3.get;\n    return _get2(keyboardFormStore);\n  },\n  set: function set(_ref4, event) {\n    var _set2 = _ref4.set;\n\n    _set2(keyboardFormStore, function (keyboardFormStore) {\n      var test = keyboardFormStore.colors.slice().map(function (s, idx) {\n        s[event.target.tabIndex] = event.target.value;\n      });\n      console.log(\"test\", test);\n      console.log(\"keyboardFormStore\", keyboardFormStore);\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        colors: test\n      });\n    });\n  }\n});\nvar setBoolean = selector({\n  key: \"setBoolean\",\n  get: function get(_ref5) {\n    var _get3 = _ref5.get;\n    return _get3(keyboardFormStore);\n  },\n  set: function set(_ref6, event) {\n    var _set3 = _ref6.set;\n\n    _set3(keyboardFormStore, function (keyboardFormStore) {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, _defineProperty({}, event.target.name, Boolean(event.target.value)));\n    });\n  }\n});\nexport var useKeyboardForm = function useKeyboardForm() {\n  _s();\n\n  return {\n    values: useRecoilValue(keyboardFormStore),\n    setString: useSetRecoilState(setString),\n    addStringToArray: useSetRecoilState(addStringToArray),\n    setBoolean: useSetRecoilState(setBoolean)\n  };\n};\n\n_s(useKeyboardForm, \"6XTyIZZvZ1XZQrNL5if8BBSZO+0=\", false, function () {\n  return [useRecoilValue, useSetRecoilState, useSetRecoilState, useSetRecoilState];\n});","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/lib/keyboardFormStore.ts"],"names":["atom","selector","useRecoilValue","useSetRecoilState","defaultValues","angle","colors","connector","extraPcbs","extraPlates","firmware","layout","mount","name","pcb","size","switchSupport","errors","keyboardFormStore","key","setString","get","set","event","target","value","addStringToArray","test","slice","map","s","idx","tabIndex","console","log","setBoolean","Boolean","useKeyboardForm","values"],"mappings":"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","sourcesContent":["import { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\n\ninterface IKeyboardForm {\n  angle: string;\n  colors: string[] | null;\n  connector?: string;\n  extraPcbs: boolean;\n  extraPlates: boolean;\n  firmware?: string;\n  layout: string[] | null;\n  mount: string;\n  name: string;\n  pcb?: string;\n  size: string;\n  switchSupport?: string[] | null;\n  errors?: boolean;\n}\n\nconst defaultValues: IKeyboardForm = {\n  angle: \"\",\n  colors: [\"dffsdfsdf\"],\n  connector: \"\",\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  layout: [\"\"],\n  mount: \"\",\n  name: \"\",\n  pcb: \"\",\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false,\n};\n\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues,\n});\n\nconst setString = selector({\n  key: \"setString\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return { ...keyboardFormStore, [event.target.name]: event.target.value };\n    });\n  },\n});\n\nconst addStringToArray = selector({\n  key: \"addStringToArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const test = keyboardFormStore.colors.slice().map((s, idx) => {\n        s[event.target.tabIndex] = event.target.value;\n      });\n      console.log(\"test\", test);\n      console.log(\"keyboardFormStore\", keyboardFormStore);\n      return {\n        ...keyboardFormStore,\n        colors: test,\n      };\n    });\n  },\n});\n\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: Boolean(event.target.value),\n      };\n    });\n  },\n});\n\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  addStringToArray: useSetRecoilState(addStringToArray),\n  setBoolean: useSetRecoilState(setBoolean),\n});\n"]},"metadata":{},"sourceType":"module"}