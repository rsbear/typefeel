{"ast":null,"code":"var _jsxFileName = \"/Users/rsbear/projects/typefeel/web/components/KeyboardFormSteps/StepOne.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useKeyboardForm } from \"../../lib/keyboardFormStore\";\nimport { Flex, BorderBox, Sans, Grid } from \"@rsbear/betsy\";\nimport { useTheme } from \"emotion-theming\";\nimport { Input } from \"../UI/Input\";\n\nconst StepOne = ({\n  setStepOneComplete\n}) => {\n  const {\n    values,\n    setString\n  } = useKeyboardForm();\n  const theme = useTheme();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(BorderBox, {\n    p: \"10px 20px\",\n    border: `solid 1px ${theme.colors.dividerColor}`,\n    borderRadius: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(Sans, {\n    fontWeight: 600,\n    fontSize: \"14px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"Name & Brand\"), __jsx(Grid, {\n    preset: 2,\n    columnGap: 15,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    role: \"text\",\n    placeholder: \"Name\",\n    name: \"name\",\n    value: values.name,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"brand\",\n    name: \"brand\",\n    value: values.brand,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }))), __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"size\",\n    name: \"size\",\n    value: values.size,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"mount\",\n    name: \"mount\",\n    value: values.mount,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"typing angle\",\n    name: \"angle\",\n    value: values.angle,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"connection\",\n    name: \"connection\",\n    value: values.connection,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"pcb\",\n    name: \"pcb\",\n    value: values.pcb,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"firmware\",\n    name: \"firmware\",\n    value: values.firmware,\n    onChange: e => setString(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  })), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"do you want to provide colors\"), __jsx(\"button\", {\n    onClick: () => setStepOneComplete(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"next\"));\n};\n\nexport default StepOne;","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/components/KeyboardFormSteps/StepOne.tsx"],"names":["useKeyboardForm","Flex","BorderBox","Sans","Grid","useTheme","Input","StepOne","setStepOneComplete","values","setString","theme","colors","dividerColor","name","e","brand","size","mount","angle","connection","pcb","firmware"],"mappings":"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","sourcesContent":["import { FC } from \"react\";\nimport { useKeyboardForm } from \"../../lib/keyboardFormStore\";\nimport { Flex, BorderBox, Sans, Grid } from \"@rsbear/betsy\";\nimport { useTheme } from \"emotion-theming\";\n\nimport { ITheme } from \"../../lib/types\";\nimport { Input } from \"../UI/Input\";\n\ninterface P {\n  setStepOneComplete: Function;\n}\n\nconst StepOne: FC<P> = ({ setStepOneComplete }) => {\n  const { values, setString } = useKeyboardForm();\n  const theme: ITheme = useTheme();\n\n  return (\n    <div>\n      <BorderBox\n        p=\"10px 20px\"\n        border={`solid 1px ${theme.colors.dividerColor}`}\n        borderRadius=\"4px\"\n      >\n        <Sans fontWeight={600} fontSize=\"14px\">\n          Name &amp; Brand\n        </Sans>\n        <Grid preset={2} columnGap={15}>\n          <Input\n            role=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            value={values.name}\n            onChange={(e) => setString(e)}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"brand\"\n            name=\"brand\"\n            value={values.brand}\n            onChange={(e) => setString(e)}\n          />\n        </Grid>\n      </BorderBox>\n\n      <Flex>\n        <input\n          type=\"text\"\n          placeholder=\"size\"\n          name=\"size\"\n          value={values.size}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"mount\"\n          name=\"mount\"\n          value={values.mount}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"typing angle\"\n          name=\"angle\"\n          value={values.angle}\n          onChange={(e) => setString(e)}\n        />\n      </Flex>\n\n      <Flex>\n        <input\n          type=\"text\"\n          placeholder=\"connection\"\n          name=\"connection\"\n          value={values.connection}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"pcb\"\n          name=\"pcb\"\n          value={values.pcb}\n          onChange={(e) => setString(e)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"firmware\"\n          name=\"firmware\"\n          value={values.firmware}\n          onChange={(e) => setString(e)}\n        />\n      </Flex>\n\n      <p>do you want to provide colors</p>\n\n      <button onClick={() => setStepOneComplete()}>next</button>\n    </div>\n  );\n};\n\nexport default StepOne;\n"]},"metadata":{},"sourceType":"module"}