{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\nconst defaultValues = {\n  angle: \"\",\n  colors: [\"dffsdfsdf\"],\n  connector: \"\",\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  layout: [\"\"],\n  mount: \"\",\n  name: \"\",\n  pcb: \"\",\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false\n};\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues\n});\nconst setString = selector({\n  key: \"setString\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: event.target.value\n      });\n    });\n  }\n});\nconst addStringToArray = selector({\n  key: \"addStringToArray\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      const items = keyboardFormStore.colors.slice().sort((a, b) => {\n        console.log(\"a\", a);\n        console.log(\"b\", b);\n      });\n      console.log(\"items\", items);\n      console.log(\"keyboardFormStore\", keyboardFormStore);\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        colors: items\n      });\n    });\n  }\n});\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: Boolean(event.target.value)\n      });\n    });\n  }\n});\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  addStringToArray: useSetRecoilState(addStringToArray),\n  setBoolean: useSetRecoilState(setBoolean)\n});","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/lib/keyboardFormStore.ts"],"names":["atom","selector","useRecoilValue","useSetRecoilState","defaultValues","angle","colors","connector","extraPcbs","extraPlates","firmware","layout","mount","name","pcb","size","switchSupport","errors","keyboardFormStore","key","default","setString","get","set","event","target","value","addStringToArray","items","slice","sort","a","b","console","log","setBoolean","Boolean","useKeyboardForm","values"],"mappings":"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","sourcesContent":["import { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\n\ninterface IKeyboardForm {\n  angle: string;\n  colors: string[] | null;\n  connector?: string;\n  extraPcbs: boolean;\n  extraPlates: boolean;\n  firmware?: string;\n  layout: string[] | null;\n  mount: string;\n  name: string;\n  pcb?: string;\n  size: string;\n  switchSupport?: string[] | null;\n  errors?: boolean;\n}\n\nconst defaultValues: IKeyboardForm = {\n  angle: \"\",\n  colors: [\"dffsdfsdf\"],\n  connector: \"\",\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  layout: [\"\"],\n  mount: \"\",\n  name: \"\",\n  pcb: \"\",\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false,\n};\n\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues,\n});\n\nconst setString = selector({\n  key: \"setString\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return { ...keyboardFormStore, [event.target.name]: event.target.value };\n    });\n  },\n});\n\nconst addStringToArray = selector({\n  key: \"addStringToArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const items = keyboardFormStore.colors.slice().sort((a, b) => {\n        console.log(\"a\", a);\n        console.log(\"b\", b);\n      });\n      console.log(\"items\", items);\n      console.log(\"keyboardFormStore\", keyboardFormStore);\n      return {\n        ...keyboardFormStore,\n        colors: items,\n      };\n    });\n  },\n});\n\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: Boolean(event.target.value),\n      };\n    });\n  },\n});\n\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  addStringToArray: useSetRecoilState(addStringToArray),\n  setBoolean: useSetRecoilState(setBoolean),\n});\n"]},"metadata":{},"sourceType":"module"}