{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\nconst defaultValues = {\n  angle: \"\",\n  brand: \"\",\n  cases: [{\n    material: \"\"\n  }],\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: null,\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  plates: [{\n    material: \"\"\n  }],\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false\n};\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues\n});\nconst setString = selector({\n  key: \"setString\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: event.target.value\n      });\n    });\n  }\n});\nconst changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event, idx) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      const oldColors = _objectSpread({}, keyboardFormStore.colors);\n\n      const newColors = [];\n      Object.entries(oldColors).map(s => {\n        const yes = s[event.target.tabIndex] = event.target.value;\n        newColors.push(yes);\n      });\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        colors: newColors\n      });\n    });\n  }\n});\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      console.log(\"even\", event.target.name);\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: Boolean(event.target.value)\n      });\n    });\n  }\n});\nconst setObjArray = selector({\n  key: \"setObjArray\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      let idx = event.target.tabIndex;\n      const pushObj = {\n        [idx]: event.target.value\n      };\n      const newArr = [];\n      const pushToArr = newArr.push(pushObj);\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: pushToArr\n      });\n    });\n  }\n});\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  changeStringInArray: useSetRecoilState(changeStringInArray),\n  setBoolean: useSetRecoilState(setBoolean),\n  setObjArray: useSetRecoilState(setObjArray)\n});","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/lib/keyboardFormStore.ts"],"names":["atom","selector","useRecoilValue","useSetRecoilState","defaultValues","angle","brand","cases","material","colors","connection","editions","extraPcbs","extraPlates","firmware","images","layouts","mount","name","notes","pcb","plates","size","switchSupport","errors","keyboardFormStore","key","default","setString","get","set","event","target","value","changeStringInArray","idx","oldColors","newColors","Object","entries","map","s","yes","tabIndex","push","setBoolean","console","log","Boolean","setObjArray","pushObj","newArr","pushToArr","useKeyboardForm","values"],"mappings":"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","sourcesContent":["import { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\n\ninterface IPlate {\n  material: string;\n  price?: string;\n}\n\ninterface ICase {\n  material: string;\n  price?: string;\n}\n\ninterface IKeyboardForm {\n  // part 1\n  angle: string;\n  brand: string;\n  colors: string[] | null;\n  connection?: string;\n  firmware?: string;\n  mount: string;\n  name: string;\n  pcb?: string;\n  size: string;\n\n  // part 2\n  extraPcbs: boolean;\n  extraPlates: boolean;\n  layouts: string[] | null;\n  switchSupport?: string[] | null;\n  editions: string[] | null;\n  cases: ICase[];\n  plates: IPlate[];\n\n  // part 3\n  notes: string[];\n  images: string[];\n  errors?: boolean;\n}\n\nconst defaultValues: IKeyboardForm = {\n  angle: \"\",\n  brand: \"\",\n  cases: [{ material: \"\" }],\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: null,\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  plates: [{ material: \"\" }],\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false,\n};\n\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues,\n});\n\nconst setString = selector({\n  key: \"setString\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return { ...keyboardFormStore, [event.target.name]: event.target.value };\n    });\n  },\n});\n\nconst changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event, idx) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const oldColors = { ...keyboardFormStore.colors };\n\n      const newColors = [];\n\n      Object.entries(oldColors).map((s) => {\n        const yes = (s[event.target.tabIndex] = event.target.value);\n        newColors.push(yes);\n      });\n\n      return {\n        ...keyboardFormStore,\n        colors: newColors,\n      };\n    });\n  },\n});\n\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      console.log(\"even\", event.target.name);\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: Boolean(event.target.value),\n      };\n    });\n  },\n});\n\nconst setObjArray = selector({\n  key: \"setObjArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      let idx = event.target.tabIndex;\n      const pushObj = {\n        [idx]: event.target.value,\n      };\n      const newArr = [];\n      const pushToArr = newArr.push(pushObj);\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: pushToArr,\n      };\n    });\n  },\n});\n\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  changeStringInArray: useSetRecoilState(changeStringInArray),\n  setBoolean: useSetRecoilState(setBoolean),\n  setObjArray: useSetRecoilState(setObjArray),\n});\n"]},"metadata":{},"sourceType":"module"}