{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\nconst defaultValues = {\n  angle: \"\",\n  brand: \"\",\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: [],\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false\n};\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues\n});\nconst setString = selector({\n  key: \"setString\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: event.target.value\n      });\n    });\n  }\n});\nconst changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      const oldColors = _objectSpread({}, keyboardFormStore.colors);\n\n      const newColors = [];\n      Object.entries(oldColors).map(s => {\n        const yes = s[event.target.tabIndex] = event.target.value;\n        newColors.push(yes);\n      });\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        colors: newColors\n      });\n    });\n  }\n});\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({\n    get\n  }) => get(keyboardFormStore),\n  set: ({\n    set\n  }, event) => {\n    set(keyboardFormStore, keyboardFormStore => {\n      return _objectSpread(_objectSpread({}, keyboardFormStore), {}, {\n        [event.target.name]: Boolean(event.target.value)\n      });\n    });\n  }\n});\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  changeStringInArray: useSetRecoilState(changeStringInArray),\n  setBoolean: useSetRecoilState(setBoolean)\n});","map":{"version":3,"sources":["/Users/rsbear/projects/typefeel/web/lib/keyboardFormStore.ts"],"names":["atom","selector","useRecoilValue","useSetRecoilState","defaultValues","angle","brand","colors","connection","editions","extraPcbs","extraPlates","firmware","images","layouts","mount","name","notes","pcb","size","switchSupport","errors","keyboardFormStore","key","default","setString","get","set","event","target","value","changeStringInArray","oldColors","newColors","Object","entries","map","s","yes","tabIndex","push","setBoolean","Boolean","useKeyboardForm","values"],"mappings":"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","sourcesContent":["import { atom, selector, useRecoilValue, useSetRecoilState } from \"recoil\";\n\ninterface IPlate {\n  material: string;\n  price?: string;\n}\n\ninterface ICase {\n  material: string;\n  price?: string;\n}\n\ninterface IKeyboardForm {\n  // part 1\n  angle: string;\n  brand: string;\n  colors: string[] | null;\n  connection?: string;\n  firmware?: string;\n  mount: string;\n  name: string;\n  pcb?: string;\n  size: string;\n\n  // part 2\n  extraPcbs: boolean;\n  extraPlates: boolean;\n  layouts: string[] | null;\n  switchSupport?: string[] | null;\n  editions: string[] | null;\n  cases: ICase[];\n  plates: IPlate[];\n\n  // part 3\n  notes: string[];\n  images: string[];\n  errors?: boolean;\n}\n\nconst defaultValues: IKeyboardForm = {\n  angle: \"\",\n  brand: \"\",\n  colors: [\"dffsdfsdf\"],\n  connection: \"\",\n  editions: [],\n  extraPcbs: false,\n  extraPlates: false,\n  firmware: \"\",\n  images: [\"\"],\n  layouts: [\"\"],\n  mount: \"\",\n  name: \"\",\n  notes: [\"\"],\n  pcb: \"\",\n  size: \"\",\n  switchSupport: [\"\"],\n  errors: false,\n};\n\nconst keyboardFormStore = atom({\n  key: \"keyboardFormStore\",\n  default: defaultValues,\n});\n\nconst setString = selector({\n  key: \"setString\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return { ...keyboardFormStore, [event.target.name]: event.target.value };\n    });\n  },\n});\n\nconst changeStringInArray = selector({\n  key: \"changeStringInArray\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      const oldColors = { ...keyboardFormStore.colors };\n\n      const newColors = [];\n\n      Object.entries(oldColors).map((s) => {\n        const yes = (s[event.target.tabIndex] = event.target.value);\n        newColors.push(yes);\n      });\n\n      return {\n        ...keyboardFormStore,\n        colors: newColors,\n      };\n    });\n  },\n});\n\nconst setBoolean = selector({\n  key: \"setBoolean\",\n  get: ({ get }) => get(keyboardFormStore),\n  set: ({ set }, event) => {\n    set(keyboardFormStore, (keyboardFormStore) => {\n      return {\n        ...keyboardFormStore,\n        [event.target.name]: Boolean(event.target.value),\n      };\n    });\n  },\n});\n\nexport const useKeyboardForm = () => ({\n  values: useRecoilValue(keyboardFormStore),\n  setString: useSetRecoilState(setString),\n  changeStringInArray: useSetRecoilState(changeStringInArray),\n  setBoolean: useSetRecoilState(setBoolean),\n});\n"]},"metadata":{},"sourceType":"module"}