{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/rsbear/dev/typefeel/lib/apollo.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        serverAccessToken = _ref2.serverAccessToken,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return ___EmotionJSX(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, _ctx$ctx, req, res, serverAccessToken, cookies, response, data, apolloClient, pageProps, _ref4, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n                serverAccessToken = \"\";\n\n                if (!isServer()) {\n                  _context.next = 12;\n                  break;\n                }\n\n                cookies = cookie.parse(req.headers.cookie ? req.headers.cookie : \"\");\n\n                if (!cookies.rfs) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 7;\n                return fetch(\"http://localhost:4000/refresh_token\", {\n                  method: \"POST\",\n                  credentials: \"include\",\n                  headers: {\n                    cookie: \"rfs=\" + cookies.rfs\n                  }\n                });\n\n              case 7:\n                response = _context.sent;\n                _context.next = 10;\n                return response.json();\n\n              case 10:\n                data = _context.sent;\n                serverAccessToken = data.accessToken;\n\n              case 12:\n                // Run all GraphQL queries in the component tree\n                // and extract the resulting data\n                apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 16;\n                return PageComponent.getInitialProps(ctx);\n\n              case 16:\n                _context.t0 = _context.sent;\n                _context.next = 20;\n                break;\n\n              case 19:\n                _context.t0 = {};\n\n              case 20:\n                pageProps = _context.t0;\n\n                if (!false) {\n                  _context.next = 38;\n                  break;\n                }\n\n                if (!(res && res.finished)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {});\n\n              case 24:\n                if (!ssr) {\n                  _context.next = 37;\n                  break;\n                }\n\n                _context.prev = 25;\n                _context.next = 28;\n                return import(\"@apollo/react-ssr\");\n\n              case 28:\n                _ref4 = _context.sent;\n                getDataFromTree = _ref4.getDataFromTree;\n                _context.next = 32;\n                return getDataFromTree(___EmotionJSX(AppTree, {\n                  pageProps: _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  }),\n                  apolloClient: apolloClient,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 104\n                  },\n                  __self: this\n                }));\n\n              case 32:\n                _context.next = 37;\n                break;\n\n              case 34:\n                _context.prev = 34;\n                _context.t1 = _context[\"catch\"](25);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n              case 37:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 38:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloState,\n                  serverAccessToken: serverAccessToken\n                }));\n\n              case 40:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[25, 34]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(initState, serverAccessToken) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serverAccessToken = arguments.length > 1 ? arguments[1] : undefined;\n  var httpLink = new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\",\n    fetch: fetch\n  });\n  var uploadLink = createUploadLink({\n    uri: \"http://localhost:4000/graphql\" // credentials: \"include\",\n    // fetch\n    // fetchOptions\n\n  });\n  var refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: function isTokenValidOrUndefined() {\n      var token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        if (_Date$now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (_unused) {\n        return false;\n      }\n    },\n    fetchAccessToken: function fetchAccessToken() {\n      return fetch(\"http://localhost:4000/refresh_token\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: function handleFetch(accessToken) {\n      setAccessToken(accessToken);\n    },\n    handleError: function handleError(err) {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n  var authLink = setContext(function (_request, _ref5) {\n    var headers = _ref5.headers;\n    var token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  var errorLink = onError(function (_ref6) {\n    var graphQLErrors = _ref6.graphQLErrors,\n        networkError = _ref6.networkError;\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, uploadLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/rsbear/dev/typefeel/lib/apollo.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","TokenRefreshLink","createUploadLink","jwtDecode","getAccessToken","setAccessToken","onError","ApolloLink","cookie","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","cookies","parse","headers","rfs","method","credentials","response","json","data","accessToken","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","httpLink","uri","uploadLink","refreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","fetchAccessToken","handleFetch","handleError","err","authLink","_request","authorization","errorLink","graphQLErrors","networkError","log","ssrMode","link","from","restore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n    const client = apolloClient || initApolloClient(apolloState);\n    return <PageComponent {...pageProps} apolloClient={client} />;\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      let serverAccessToken = \"\";\n\n      if (isServer()) {\n        const cookies = cookie.parse(\n          req.headers.cookie ? req.headers.cookie : \"\"\n        );\n        if (cookies.rfs) {\n          const response = await fetch(\"http://localhost:4000/refresh_token\", {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n              cookie: \"rfs=\" + cookies.rfs\n            }\n          });\n          const data = await response.json();\n          serverAccessToken = data.accessToken;\n        }\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient(\n        {},\n        serverAccessToken\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n        serverAccessToken\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initState: any, serverAccessToken?: string) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, serverAccessToken?: string) {\n  const httpLink = new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\",\n    fetch\n  });\n\n  const uploadLink = createUploadLink({\n    uri: \"http://localhost:4000/graphql\"\n    // credentials: \"include\",\n    // fetch\n    // fetchOptions\n  });\n\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const { exp } = jwtDecode(token);\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(\"http://localhost:4000/refresh_token\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n\n  const authLink = setContext((_request, { headers }) => {\n    const token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `bearer ${token}` : \"\"\n      }\n    };\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([\n      refreshLink,\n      authLink,\n      errorLink,\n      uploadLink,\n      httpLink\n    ]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}