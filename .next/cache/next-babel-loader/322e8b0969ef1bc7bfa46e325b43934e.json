{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/rsbear/dev/typefeel/pages/_app.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport App from \"next/app\";\nimport React from \"react\";\nimport NextNprogress from \"nextjs-progressbar\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { Query } from \"@apollo/react-components\";\nimport { withApollo } from \"../lib/apollo\";\nimport gql from \"graphql-tag\";\nimport { Global } from \"@emotion/core\";\nimport { globalStyle } from \"../styles/main\";\nconst AUTH = gql`\n  query Me {\n    me {\n      id\n      username\n      email\n      keyboardjoins {\n        id\n        keyboardId\n      }\n      follows {\n        id\n        keyboard {\n          id\n          shortId\n        }\n      }\n    }\n  }\n`;\n\nclass MyApp extends App {\n  render() {\n    const {\n      Component,\n      pageProps,\n      apolloClient\n    } = this.props;\n    return ___EmotionJSX(ApolloProvider, {\n      client: apolloClient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, ___EmotionJSX(Global, {\n      styles: globalStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), ___EmotionJSX(NextNprogress, {\n      color: \"rgba(0,0,0,.8)\",\n      height: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), ___EmotionJSX(Query, {\n      query: AUTH,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      return ___EmotionJSX(Component, _extends({\n        authUser: !loading && !error && data ? data.me : null\n      }, pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }));\n  }\n\n}\n\nexport default withApollo(MyApp);","map":{"version":3,"sources":["/Users/rsbear/dev/typefeel/pages/_app.tsx"],"names":["App","React","NextNprogress","ApolloProvider","Query","withApollo","gql","Global","globalStyle","AUTH","MyApp","render","Component","pageProps","apolloClient","props","loading","error","data","me"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,UAAT;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,WAAT;AAEA,MAAMC,IAAI,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;CAAjB;;AAqBA,MAAMI,KAAN,SAAoBV,GAApB,CAA6B;AAC3BW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAyC,KAAKC,KAApD;AACA,WACE,cAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,cAAC,MAAD;AAAQ,MAAA,MAAM,EAAEN,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,cAAC,aAAD;AAAe,MAAA,KAAK,EAAC,gBAArB;AAAsC,MAAA,MAAM,EAAC,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,cAAC,KAAD;AAAO,MAAA,KAAK,EAAEC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAEO,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAD,KAAmC;AAClC,aACE,cAAC,SAAD;AACE,QAAA,QAAQ,EAAE,CAACF,OAAD,IAAY,CAACC,KAAb,IAAsBC,IAAtB,GAA6BA,IAAI,CAACC,EAAlC,GAAuC;AADnD,SAEMN,SAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAMD,KARH,CAHF,CADF;AAiBD;;AApB0B;;AAuB7B,eAAeR,UAAU,CAACK,KAAD,CAAzB","sourcesContent":["import App from \"next/app\";\nimport React from \"react\";\nimport NextNprogress from \"nextjs-progressbar\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { Query } from \"@apollo/react-components\";\nimport { withApollo } from \"lib/apollo\";\nimport gql from \"graphql-tag\";\n\nimport { Global } from \"@emotion/core\";\nimport { globalStyle } from \"styles/main\";\n\nconst AUTH = gql`\n  query Me {\n    me {\n      id\n      username\n      email\n      keyboardjoins {\n        id\n        keyboardId\n      }\n      follows {\n        id\n        keyboard {\n          id\n          shortId\n        }\n      }\n    }\n  }\n`;\n\nclass MyApp extends App<any> {\n  render() {\n    const { Component, pageProps, apolloClient } = this.props;\n    return (\n      <ApolloProvider client={apolloClient}>\n        <Global styles={globalStyle} />\n        <NextNprogress color=\"rgba(0,0,0,.8)\" height=\"3\" />\n        <Query query={AUTH}>\n          {({ loading, error, data }: any) => {\n            return (\n              <Component\n                authUser={!loading && !error && data ? data.me : null}\n                {...pageProps}\n              />\n            );\n          }}\n        </Query>\n        {/* <Component {...pageProps} /> */}\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withApollo(MyApp);\n"]},"metadata":{},"sourceType":"module"}