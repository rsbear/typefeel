{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject23() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation voteKeyboardUp($id: String!) {\\n  voteKeyboardUp(id: $id)\\n}\\n    \"]);\n\n  _templateObject23 = function _templateObject23() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject22() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation voteKeyboardDown($id: String!) {\\n  voteKeyboardDown(id: $id)\\n}\\n    \"]);\n\n  _templateObject22 = function _templateObject22() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject21() {\n  var data = _taggedTemplateLiteral([\"\\n    query userDashboard {\\n  me {\\n    id\\n    username\\n    email\\n    keyboards {\\n      id\\n      shortId\\n      name\\n      joins {\\n        id\\n      }\\n      interestCheck\\n      groupBuy\\n      groupBuySoon\\n      closed\\n    }\\n    keyboardjoins {\\n      id\\n      keyboard {\\n        shortId\\n        id\\n        name\\n      }\\n    }\\n    follows {\\n      id\\n      keyboard {\\n        id\\n        name\\n        size\\n        mount\\n        shortId\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject21 = function _templateObject21() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject20() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updateKeyboard($id: String!, $data: KeyboardInput!) {\\n  updateKeyboard(id: $id, data: $data)\\n}\\n    \"]);\n\n  _templateObject20 = function _templateObject20() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject19() {\n  var data = _taggedTemplateLiteral([\"\\n    query sortKeyboards($where: SearchInput!) {\\n  sortKeyboards(where: $where) {\\n    id\\n    shortId\\n    name\\n    mount\\n    size\\n    images600\\n  }\\n}\\n    \"]);\n\n  _templateObject19 = function _templateObject19() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject18() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation signup($username: String!, $email: String!, $secret: String!) {\\n  signup(username: $username, email: $email, secret: $secret)\\n}\\n    \"]);\n\n  _templateObject18 = function _templateObject18() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject17() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    id\\n    email\\n    username\\n    keyboardjoins {\\n      id\\n    }\\n    follows {\\n      id\\n      keyboard {\\n        id\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject17 = function _templateObject17() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation makeKeyset($data: KeysetInput!, $images: [Upload!]!) {\\n  makeKeyset(data: $data, images: $images)\\n}\\n    \"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation makeKeyboard($data: KeyboardInput!, $images: [Upload!]!) {\\n  makeKeyboard(data: $data, images: $images)\\n}\\n    \"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation login($email: String!, $secret: String!) {\\n  login(email: $email, secret: $secret) {\\n    accessToken\\n    user {\\n      id\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    query keysets {\\n  keysets {\\n    id\\n    shortId\\n    name\\n    profile\\n    images600\\n  }\\n}\\n    \"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    query keyset($shortId: String!) {\\n  keyset(shortId: $shortId) {\\n    colors {\\n      id\\n      hex\\n      ral\\n    }\\n    created\\n    details\\n    id\\n    images1500\\n    kits {\\n      id\\n      kit\\n      name\\n      price\\n    }\\n    maker {\\n      username\\n    }\\n    name\\n    profile\\n    shortId\\n    stem\\n  }\\n}\\n    \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    query keyboards {\\n  keyboards {\\n    id\\n    images600\\n    mount\\n    shortId\\n    size\\n    name\\n  }\\n}\\n    \"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    query keyboardPosts($shortId: String!) {\\n  keyboard(shortId: $shortId) {\\n    id\\n    shortId\\n    images600\\n    name\\n    posts {\\n      id\\n      body\\n      created\\n      user {\\n        username\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation keyboardAnnouncement($id: String!, $announcement: String!) {\\n  keyboardAnnouncement(id: $id, announcement: $announcement)\\n}\\n    \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    query Keyboard($shortId: String!) {\\n  keyboard(shortId: $shortId) {\\n    angle\\n    announcement\\n    brand\\n    closed\\n    connector\\n    editions {\\n      id\\n      name\\n      price\\n      suggestedPrice\\n      cases\\n      plates\\n    }\\n    details\\n    firmware\\n    groupBuy\\n    groupBuySoon\\n    id\\n    images1500\\n    interestCheck\\n    layouts\\n    market\\n    mount\\n    name\\n    pcb\\n    shortId\\n    size\\n    support\\n    posts {\\n      id\\n      body\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation joinKeyboard($id: String!, $data: JoinKeyboardInput!) {\\n  joinKeyboard(id: $id, data: $data)\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation generateAuth($email: String!) {\\n  generateAuth(email: $email)\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation followKeyboardDelete($id: String!) {\\n  followKeyboardDelete(id: $id)\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation followKeyboard($id: String!) {\\n  followKeyboard(id: $id)\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createPost($id: String!, $body: String!) {\\n  createPost(id: $id, body: $body)\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query bye {\\n  bye\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query auths {\\n  auths {\\n    id\\n    secret\\n    email\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport var AuthsDocument = gql(_templateObject());\n/**\n * __useAuthsQuery__\n *\n * To run a query within a React component, call `useAuthsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAuthsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AuthsDocument, baseOptions);\n}\nexport function useAuthsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AuthsDocument, baseOptions);\n}\nexport var ByeDocument = gql(_templateObject2());\n/**\n * __useByeQuery__\n *\n * To run a query within a React component, call `useByeQuery` and pass it any options that fit your needs.\n * When your component renders, `useByeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useByeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useByeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ByeDocument, baseOptions);\n}\nexport function useByeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ByeDocument, baseOptions);\n}\nexport var CreatePostDocument = gql(_templateObject3());\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      body: // value for 'body'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreatePostDocument, baseOptions);\n}\nexport var FollowKeyboardDocument = gql(_templateObject4());\n\n/**\n * __useFollowKeyboardMutation__\n *\n * To run a mutation, you first call `useFollowKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followKeyboardMutation, { data, loading, error }] = useFollowKeyboardMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFollowKeyboardMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(FollowKeyboardDocument, baseOptions);\n}\nexport var FollowKeyboardDeleteDocument = gql(_templateObject5());\n\n/**\n * __useFollowKeyboardDeleteMutation__\n *\n * To run a mutation, you first call `useFollowKeyboardDeleteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowKeyboardDeleteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followKeyboardDeleteMutation, { data, loading, error }] = useFollowKeyboardDeleteMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFollowKeyboardDeleteMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(FollowKeyboardDeleteDocument, baseOptions);\n}\nexport var GenerateAuthDocument = gql(_templateObject6());\n\n/**\n * __useGenerateAuthMutation__\n *\n * To run a mutation, you first call `useGenerateAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useGenerateAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [generateAuthMutation, { data, loading, error }] = useGenerateAuthMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useGenerateAuthMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(GenerateAuthDocument, baseOptions);\n}\nexport var JoinKeyboardDocument = gql(_templateObject7());\n\n/**\n * __useJoinKeyboardMutation__\n *\n * To run a mutation, you first call `useJoinKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useJoinKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [joinKeyboardMutation, { data, loading, error }] = useJoinKeyboardMutation({\n *   variables: {\n *      id: // value for 'id'\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useJoinKeyboardMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(JoinKeyboardDocument, baseOptions);\n}\nexport var KeyboardDocument = gql(_templateObject8());\n/**\n * __useKeyboardQuery__\n *\n * To run a query within a React component, call `useKeyboardQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeyboardQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeyboardQuery({\n *   variables: {\n *      shortId: // value for 'shortId'\n *   },\n * });\n */\n\nexport function useKeyboardQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(KeyboardDocument, baseOptions);\n}\nexport function useKeyboardLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(KeyboardDocument, baseOptions);\n}\nexport var KeyboardAnnouncementDocument = gql(_templateObject9());\n\n/**\n * __useKeyboardAnnouncementMutation__\n *\n * To run a mutation, you first call `useKeyboardAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useKeyboardAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [keyboardAnnouncementMutation, { data, loading, error }] = useKeyboardAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *      announcement: // value for 'announcement'\n *   },\n * });\n */\nexport function useKeyboardAnnouncementMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(KeyboardAnnouncementDocument, baseOptions);\n}\nexport var KeyboardPostsDocument = gql(_templateObject10());\n/**\n * __useKeyboardPostsQuery__\n *\n * To run a query within a React component, call `useKeyboardPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeyboardPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeyboardPostsQuery({\n *   variables: {\n *      shortId: // value for 'shortId'\n *   },\n * });\n */\n\nexport function useKeyboardPostsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(KeyboardPostsDocument, baseOptions);\n}\nexport function useKeyboardPostsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(KeyboardPostsDocument, baseOptions);\n}\nexport var KeyboardsDocument = gql(_templateObject11());\n/**\n * __useKeyboardsQuery__\n *\n * To run a query within a React component, call `useKeyboardsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeyboardsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeyboardsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useKeyboardsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(KeyboardsDocument, baseOptions);\n}\nexport function useKeyboardsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(KeyboardsDocument, baseOptions);\n}\nexport var KeysetDocument = gql(_templateObject12());\n/**\n * __useKeysetQuery__\n *\n * To run a query within a React component, call `useKeysetQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeysetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeysetQuery({\n *   variables: {\n *      shortId: // value for 'shortId'\n *   },\n * });\n */\n\nexport function useKeysetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(KeysetDocument, baseOptions);\n}\nexport function useKeysetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(KeysetDocument, baseOptions);\n}\nexport var KeysetsDocument = gql(_templateObject13());\n/**\n * __useKeysetsQuery__\n *\n * To run a query within a React component, call `useKeysetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeysetsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeysetsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useKeysetsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(KeysetsDocument, baseOptions);\n}\nexport function useKeysetsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(KeysetsDocument, baseOptions);\n}\nexport var LoginDocument = gql(_templateObject14());\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      secret: // value for 'secret'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport var MakeKeyboardDocument = gql(_templateObject15());\n\n/**\n * __useMakeKeyboardMutation__\n *\n * To run a mutation, you first call `useMakeKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMakeKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [makeKeyboardMutation, { data, loading, error }] = useMakeKeyboardMutation({\n *   variables: {\n *      data: // value for 'data'\n *      images: // value for 'images'\n *   },\n * });\n */\nexport function useMakeKeyboardMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(MakeKeyboardDocument, baseOptions);\n}\nexport var MakeKeysetDocument = gql(_templateObject16());\n\n/**\n * __useMakeKeysetMutation__\n *\n * To run a mutation, you first call `useMakeKeysetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMakeKeysetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [makeKeysetMutation, { data, loading, error }] = useMakeKeysetMutation({\n *   variables: {\n *      data: // value for 'data'\n *      images: // value for 'images'\n *   },\n * });\n */\nexport function useMakeKeysetMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(MakeKeysetDocument, baseOptions);\n}\nexport var MeDocument = gql(_templateObject17());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}\nexport var SignupDocument = gql(_templateObject18());\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      secret: // value for 'secret'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SignupDocument, baseOptions);\n}\nexport var SortKeyboardsDocument = gql(_templateObject19());\n/**\n * __useSortKeyboardsQuery__\n *\n * To run a query within a React component, call `useSortKeyboardsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSortKeyboardsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSortKeyboardsQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\n\nexport function useSortKeyboardsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(SortKeyboardsDocument, baseOptions);\n}\nexport function useSortKeyboardsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(SortKeyboardsDocument, baseOptions);\n}\nexport var UpdateKeyboardDocument = gql(_templateObject20());\n\n/**\n * __useUpdateKeyboardMutation__\n *\n * To run a mutation, you first call `useUpdateKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateKeyboardMutation, { data, loading, error }] = useUpdateKeyboardMutation({\n *   variables: {\n *      id: // value for 'id'\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateKeyboardMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(UpdateKeyboardDocument, baseOptions);\n}\nexport var UserDashboardDocument = gql(_templateObject21());\n/**\n * __useUserDashboardQuery__\n *\n * To run a query within a React component, call `useUserDashboardQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserDashboardQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserDashboardQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useUserDashboardQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(UserDashboardDocument, baseOptions);\n}\nexport function useUserDashboardLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(UserDashboardDocument, baseOptions);\n}\nexport var VoteKeyboardDownDocument = gql(_templateObject22());\n\n/**\n * __useVoteKeyboardDownMutation__\n *\n * To run a mutation, you first call `useVoteKeyboardDownMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteKeyboardDownMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteKeyboardDownMutation, { data, loading, error }] = useVoteKeyboardDownMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useVoteKeyboardDownMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(VoteKeyboardDownDocument, baseOptions);\n}\nexport var VoteKeyboardUpDocument = gql(_templateObject23());\n\n/**\n * __useVoteKeyboardUpMutation__\n *\n * To run a mutation, you first call `useVoteKeyboardUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteKeyboardUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteKeyboardUpMutation, { data, loading, error }] = useVoteKeyboardUpMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useVoteKeyboardUpMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(VoteKeyboardUpDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/rsbear/dev/typefeel/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","AuthsDocument","useAuthsQuery","baseOptions","useQuery","useAuthsLazyQuery","useLazyQuery","ByeDocument","useByeQuery","useByeLazyQuery","CreatePostDocument","useCreatePostMutation","useMutation","FollowKeyboardDocument","useFollowKeyboardMutation","FollowKeyboardDeleteDocument","useFollowKeyboardDeleteMutation","GenerateAuthDocument","useGenerateAuthMutation","JoinKeyboardDocument","useJoinKeyboardMutation","KeyboardDocument","useKeyboardQuery","useKeyboardLazyQuery","KeyboardAnnouncementDocument","useKeyboardAnnouncementMutation","KeyboardPostsDocument","useKeyboardPostsQuery","useKeyboardPostsLazyQuery","KeyboardsDocument","useKeyboardsQuery","useKeyboardsLazyQuery","KeysetDocument","useKeysetQuery","useKeysetLazyQuery","KeysetsDocument","useKeysetsQuery","useKeysetsLazyQuery","LoginDocument","useLoginMutation","MakeKeyboardDocument","useMakeKeyboardMutation","MakeKeysetDocument","useMakeKeysetMutation","MeDocument","useMeQuery","useMeLazyQuery","SignupDocument","useSignupMutation","SortKeyboardsDocument","useSortKeyboardsQuery","useSortKeyboardsLazyQuery","UpdateKeyboardDocument","useUpdateKeyboardMutation","UserDashboardDocument","useUserDashboardQuery","useUserDashboardLazyQuery","VoteKeyboardDownDocument","useVoteKeyboardDownMutation","VoteKeyboardUpDocument","useVoteKeyboardUpMutation"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any,\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any,\n};\n\nexport type Auth = {\n   __typename?: 'Auth',\n  id: Scalars['String'],\n  email: Scalars['String'],\n  token: Scalars['String'],\n  secret: Scalars['String'],\n  created: Scalars['DateTime'],\n};\n\nexport type Color = {\n   __typename?: 'Color',\n  id: Scalars['String'],\n  hex?: Maybe<Scalars['String']>,\n  ral?: Maybe<Scalars['String']>,\n};\n\nexport type ColorInput = {\n  hex?: Maybe<Scalars['String']>,\n  ral?: Maybe<Scalars['String']>,\n};\n\n\nexport type Edition = {\n   __typename?: 'Edition',\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  name?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Int']>,\n  suggestedPrice?: Maybe<Scalars['Int']>,\n  cases?: Maybe<Array<Scalars['String']>>,\n  colors?: Maybe<Array<Scalars['String']>>,\n  plates?: Maybe<Array<Scalars['String']>>,\n};\n\nexport type EditionInput = {\n  id?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Int']>,\n  suggestedPrice?: Maybe<Scalars['Int']>,\n  cases?: Maybe<Array<Scalars['String']>>,\n  colors?: Maybe<Array<Scalars['String']>>,\n  plates?: Maybe<Array<Scalars['String']>>,\n};\n\nexport type Follow = {\n   __typename?: 'Follow',\n  id: Scalars['String'],\n  keyboardId?: Maybe<Scalars['String']>,\n  keysetId?: Maybe<Scalars['String']>,\n  keyboard: Keyboard,\n};\n\nexport type FollowInput = {\n  keyboardId?: Maybe<Scalars['String']>,\n  keysetId?: Maybe<Scalars['String']>,\n};\n\nexport type JoinKeyboard = {\n   __typename?: 'JoinKeyboard',\n  id: Scalars['String'],\n  keyboardId: Scalars['String'],\n  caseChoice: Scalars['String'],\n  plateChoice: Scalars['String'],\n  layoutChoice: Scalars['String'],\n  created: Scalars['DateTime'],\n  keyboard?: Maybe<Keyboard>,\n  user?: Maybe<User>,\n};\n\nexport type JoinKeyboardInput = {\n  caseChoice: Scalars['String'],\n  plateChoice: Scalars['String'],\n  layoutChoice: Scalars['String'],\n};\n\nexport type Keyboard = {\n   __typename?: 'Keyboard',\n  angle?: Maybe<Scalars['String']>,\n  announcement?: Maybe<Scalars['String']>,\n  brand?: Maybe<Scalars['String']>,\n  connector?: Maybe<Scalars['String']>,\n  details?: Maybe<Array<Scalars['String']>>,\n  editions?: Maybe<Array<Edition>>,\n  firmware?: Maybe<Scalars['String']>,\n  mount?: Maybe<Scalars['String']>,\n  layouts?: Maybe<Array<Scalars['String']>>,\n  pcb?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['String']>,\n  support?: Maybe<Array<Scalars['String']>>,\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  images600?: Maybe<Array<Scalars['String']>>,\n  images800?: Maybe<Array<Scalars['String']>>,\n  images1500?: Maybe<Array<Scalars['String']>>,\n  imagesRaw?: Maybe<Array<Scalars['String']>>,\n  created: Scalars['DateTime'],\n  updated: Scalars['DateTime'],\n  maker?: Maybe<User>,\n  interestCheck?: Maybe<Scalars['Boolean']>,\n  market?: Maybe<Scalars['Boolean']>,\n  groupBuy?: Maybe<Scalars['Boolean']>,\n  groupBuySoon?: Maybe<Scalars['Boolean']>,\n  closed?: Maybe<Scalars['Boolean']>,\n  joins?: Maybe<Array<JoinKeyboard>>,\n  posts?: Maybe<Array<Post>>,\n};\n\nexport type KeyboardInput = {\n  angle?: Maybe<Scalars['String']>,\n  brand?: Maybe<Scalars['String']>,\n  connector?: Maybe<Scalars['String']>,\n  details?: Maybe<Array<Scalars['String']>>,\n  editions?: Maybe<Array<EditionInput>>,\n  firmware?: Maybe<Scalars['String']>,\n  mount?: Maybe<Scalars['String']>,\n  layouts?: Maybe<Array<Scalars['String']>>,\n  pcb?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['String']>,\n  support?: Maybe<Array<Scalars['String']>>,\n  interestCheck?: Maybe<Scalars['Boolean']>,\n  groupBuy?: Maybe<Scalars['Boolean']>,\n  groupBuySoon?: Maybe<Scalars['Boolean']>,\n  market?: Maybe<Scalars['Boolean']>,\n  closed?: Maybe<Scalars['Boolean']>,\n};\n\nexport type Keyset = {\n   __typename?: 'Keyset',\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  name: Scalars['String'],\n  profile: Scalars['String'],\n  stem: Scalars['String'],\n  kits?: Maybe<Array<Kit>>,\n  colors?: Maybe<Array<Color>>,\n  images600?: Maybe<Array<Scalars['String']>>,\n  images800?: Maybe<Array<Scalars['String']>>,\n  images1500?: Maybe<Array<Scalars['String']>>,\n  imagesRaw?: Maybe<Array<Scalars['String']>>,\n  details?: Maybe<Array<Scalars['String']>>,\n  created: Scalars['DateTime'],\n  updated: Scalars['DateTime'],\n  maker?: Maybe<User>,\n};\n\nexport type KeysetInput = {\n  name: Scalars['String'],\n  profile: Scalars['String'],\n  stem: Scalars['String'],\n  kits: Array<KitInput>,\n  colors: Array<ColorInput>,\n  details: Array<Scalars['String']>,\n};\n\nexport type Kit = {\n   __typename?: 'Kit',\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  kit?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Int']>,\n  suggestedPrice?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type KitInput = {\n  kit?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  price: Scalars['Int'],\n  suggestedPrice: Scalars['Int'],\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokensForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  signup: Scalars['Boolean'],\n  banUser: Scalars['Boolean'],\n  generateAuth: Scalars['Boolean'],\n  deleteAuth: Scalars['Boolean'],\n  makeKeyboard: Scalars['Boolean'],\n  updateKeyboardStage: Scalars['Boolean'],\n  updateKeyboard: Scalars['Boolean'],\n  keyboardAnnouncement: Scalars['Boolean'],\n  deleteKeyboard: Scalars['Boolean'],\n  makeKeyset: Scalars['Boolean'],\n  deleteKeyset: Scalars['Boolean'],\n  deleteEdition: Scalars['Boolean'],\n  voteKeyboardUp: Scalars['Boolean'],\n  voteKeyboardDown: Scalars['Boolean'],\n  deleteVote: Scalars['Boolean'],\n  joinKeyboard: Scalars['Boolean'],\n  deleteJoin: Scalars['Boolean'],\n  createPost: Scalars['Boolean'],\n  deletePost: Scalars['Boolean'],\n  followKeyboard: Scalars['Boolean'],\n  followKeyboardDelete: Scalars['Boolean'],\n  deleteFollow: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['String']\n};\n\n\nexport type MutationLoginArgs = {\n  secret: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationSignupArgs = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  secret: Scalars['String']\n};\n\n\nexport type MutationBanUserArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationGenerateAuthArgs = {\n  email: Scalars['String']\n};\n\n\nexport type MutationDeleteAuthArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationMakeKeyboardArgs = {\n  images: Array<Scalars['Upload']>,\n  data: KeyboardInput\n};\n\n\nexport type MutationUpdateKeyboardStageArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationUpdateKeyboardArgs = {\n  data: KeyboardInput,\n  id: Scalars['String']\n};\n\n\nexport type MutationKeyboardAnnouncementArgs = {\n  announcement: Scalars['String'],\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteKeyboardArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationMakeKeysetArgs = {\n  images: Array<Scalars['Upload']>,\n  data: KeysetInput\n};\n\n\nexport type MutationDeleteKeysetArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteEditionArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationVoteKeyboardUpArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationVoteKeyboardDownArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteVoteArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationJoinKeyboardArgs = {\n  data: JoinKeyboardInput,\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteJoinArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationCreatePostArgs = {\n  body: Scalars['String'],\n  id: Scalars['String']\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationFollowKeyboardArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationFollowKeyboardDeleteArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteFollowArgs = {\n  id: Scalars['String']\n};\n\nexport type Post = {\n   __typename?: 'Post',\n  id: Scalars['String'],\n  body: Scalars['String'],\n  created: Scalars['DateTime'],\n  user: User,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  bye: Scalars['String'],\n  users: Array<User>,\n  me?: Maybe<User>,\n  auths: Array<Auth>,\n  keyboards: Array<Keyboard>,\n  keyboard: Keyboard,\n  sortKeyboards: Array<Keyboard>,\n  keysets: Array<Keyset>,\n  keyset: Keyset,\n  sortKeysets: Array<Keyset>,\n  editions: Array<Edition>,\n  votes: Array<Vote>,\n  joinss: Array<JoinKeyboard>,\n  postss: Array<Post>,\n  follows: Array<Follow>,\n};\n\n\nexport type QueryKeyboardArgs = {\n  shortId: Scalars['String']\n};\n\n\nexport type QuerySortKeyboardsArgs = {\n  where: SearchInput\n};\n\n\nexport type QueryKeysetArgs = {\n  shortId: Scalars['String']\n};\n\n\nexport type QuerySortKeysetsArgs = {\n  where: SearchInput\n};\n\nexport type SearchInput = {\n  interestCheck?: Maybe<Scalars['Boolean']>,\n  market?: Maybe<Scalars['Boolean']>,\n  groupBuy?: Maybe<Scalars['Boolean']>,\n};\n\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String'],\n  keyboards: Array<Keyboard>,\n  votes: Array<Vote>,\n  follows: Array<Follow>,\n  keyboardjoins: Array<JoinKeyboard>,\n};\n\nexport type Vote = {\n   __typename?: 'Vote',\n  id: Scalars['String'],\n  editionId: Scalars['String'],\n  created: Scalars['DateTime'],\n  expiration?: Maybe<Scalars['String']>,\n  user?: Maybe<User>,\n};\n\nexport type AuthsQueryVariables = {};\n\n\nexport type AuthsQuery = (\n  { __typename?: 'Query' }\n  & { auths: Array<(\n    { __typename?: 'Auth' }\n    & Pick<Auth, 'id' | 'secret' | 'email'>\n  )> }\n);\n\nexport type ByeQueryVariables = {};\n\n\nexport type ByeQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'bye'>\n);\n\nexport type CreatePostMutationVariables = {\n  id: Scalars['String'],\n  body: Scalars['String']\n};\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createPost'>\n);\n\nexport type FollowKeyboardMutationVariables = {\n  id: Scalars['String']\n};\n\n\nexport type FollowKeyboardMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'followKeyboard'>\n);\n\nexport type FollowKeyboardDeleteMutationVariables = {\n  id: Scalars['String']\n};\n\n\nexport type FollowKeyboardDeleteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'followKeyboardDelete'>\n);\n\nexport type GenerateAuthMutationVariables = {\n  email: Scalars['String']\n};\n\n\nexport type GenerateAuthMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'generateAuth'>\n);\n\nexport type JoinKeyboardMutationVariables = {\n  id: Scalars['String'],\n  data: JoinKeyboardInput\n};\n\n\nexport type JoinKeyboardMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'joinKeyboard'>\n);\n\nexport type KeyboardQueryVariables = {\n  shortId: Scalars['String']\n};\n\n\nexport type KeyboardQuery = (\n  { __typename?: 'Query' }\n  & { keyboard: (\n    { __typename?: 'Keyboard' }\n    & Pick<Keyboard, 'angle' | 'announcement' | 'brand' | 'closed' | 'connector' | 'details' | 'firmware' | 'groupBuy' | 'groupBuySoon' | 'id' | 'images1500' | 'interestCheck' | 'layouts' | 'market' | 'mount' | 'name' | 'pcb' | 'shortId' | 'size' | 'support'>\n    & { editions: Maybe<Array<(\n      { __typename?: 'Edition' }\n      & Pick<Edition, 'id' | 'name' | 'price' | 'suggestedPrice' | 'cases' | 'plates'>\n    )>>, posts: Maybe<Array<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'body'>\n    )>> }\n  ) }\n);\n\nexport type KeyboardAnnouncementMutationVariables = {\n  id: Scalars['String'],\n  announcement: Scalars['String']\n};\n\n\nexport type KeyboardAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'keyboardAnnouncement'>\n);\n\nexport type KeyboardPostsQueryVariables = {\n  shortId: Scalars['String']\n};\n\n\nexport type KeyboardPostsQuery = (\n  { __typename?: 'Query' }\n  & { keyboard: (\n    { __typename?: 'Keyboard' }\n    & Pick<Keyboard, 'id' | 'shortId' | 'images600' | 'name'>\n    & { posts: Maybe<Array<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'body' | 'created'>\n      & { user: (\n        { __typename?: 'User' }\n        & Pick<User, 'username'>\n      ) }\n    )>> }\n  ) }\n);\n\nexport type KeyboardsQueryVariables = {};\n\n\nexport type KeyboardsQuery = (\n  { __typename?: 'Query' }\n  & { keyboards: Array<(\n    { __typename?: 'Keyboard' }\n    & Pick<Keyboard, 'id' | 'images600' | 'mount' | 'shortId' | 'size' | 'name'>\n  )> }\n);\n\nexport type KeysetQueryVariables = {\n  shortId: Scalars['String']\n};\n\n\nexport type KeysetQuery = (\n  { __typename?: 'Query' }\n  & { keyset: (\n    { __typename?: 'Keyset' }\n    & Pick<Keyset, 'created' | 'details' | 'id' | 'images1500' | 'name' | 'profile' | 'shortId' | 'stem'>\n    & { colors: Maybe<Array<(\n      { __typename?: 'Color' }\n      & Pick<Color, 'id' | 'hex' | 'ral'>\n    )>>, kits: Maybe<Array<(\n      { __typename?: 'Kit' }\n      & Pick<Kit, 'id' | 'kit' | 'name' | 'price'>\n    )>>, maker: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    )> }\n  ) }\n);\n\nexport type KeysetsQueryVariables = {};\n\n\nexport type KeysetsQuery = (\n  { __typename?: 'Query' }\n  & { keysets: Array<(\n    { __typename?: 'Keyset' }\n    & Pick<Keyset, 'id' | 'shortId' | 'name' | 'profile' | 'images600'>\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  secret: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) }\n);\n\nexport type MakeKeyboardMutationVariables = {\n  data: KeyboardInput,\n  images: Array<Scalars['Upload']>\n};\n\n\nexport type MakeKeyboardMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'makeKeyboard'>\n);\n\nexport type MakeKeysetMutationVariables = {\n  data: KeysetInput,\n  images: Array<Scalars['Upload']>\n};\n\n\nexport type MakeKeysetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'makeKeyset'>\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'username'>\n    & { keyboardjoins: Array<(\n      { __typename?: 'JoinKeyboard' }\n      & Pick<JoinKeyboard, 'id'>\n    )>, follows: Array<(\n      { __typename?: 'Follow' }\n      & Pick<Follow, 'id'>\n      & { keyboard: (\n        { __typename?: 'Keyboard' }\n        & Pick<Keyboard, 'id'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type SignupMutationVariables = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  secret: Scalars['String']\n};\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'signup'>\n);\n\nexport type SortKeyboardsQueryVariables = {\n  where: SearchInput\n};\n\n\nexport type SortKeyboardsQuery = (\n  { __typename?: 'Query' }\n  & { sortKeyboards: Array<(\n    { __typename?: 'Keyboard' }\n    & Pick<Keyboard, 'id' | 'shortId' | 'name' | 'mount' | 'size' | 'images600'>\n  )> }\n);\n\nexport type UpdateKeyboardMutationVariables = {\n  id: Scalars['String'],\n  data: KeyboardInput\n};\n\n\nexport type UpdateKeyboardMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateKeyboard'>\n);\n\nexport type UserDashboardQueryVariables = {};\n\n\nexport type UserDashboardQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username' | 'email'>\n    & { keyboards: Array<(\n      { __typename?: 'Keyboard' }\n      & Pick<Keyboard, 'id' | 'shortId' | 'name' | 'interestCheck' | 'groupBuy' | 'groupBuySoon' | 'closed'>\n      & { joins: Maybe<Array<(\n        { __typename?: 'JoinKeyboard' }\n        & Pick<JoinKeyboard, 'id'>\n      )>> }\n    )>, keyboardjoins: Array<(\n      { __typename?: 'JoinKeyboard' }\n      & Pick<JoinKeyboard, 'id'>\n      & { keyboard: Maybe<(\n        { __typename?: 'Keyboard' }\n        & Pick<Keyboard, 'shortId' | 'id' | 'name'>\n      )> }\n    )>, follows: Array<(\n      { __typename?: 'Follow' }\n      & Pick<Follow, 'id'>\n      & { keyboard: (\n        { __typename?: 'Keyboard' }\n        & Pick<Keyboard, 'id' | 'name' | 'size' | 'mount' | 'shortId'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type VoteKeyboardDownMutationVariables = {\n  id: Scalars['String']\n};\n\n\nexport type VoteKeyboardDownMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'voteKeyboardDown'>\n);\n\nexport type VoteKeyboardUpMutationVariables = {\n  id: Scalars['String']\n};\n\n\nexport type VoteKeyboardUpMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'voteKeyboardUp'>\n);\n\n\nexport const AuthsDocument = gql`\n    query auths {\n  auths {\n    id\n    secret\n    email\n  }\n}\n    `;\n\n/**\n * __useAuthsQuery__\n *\n * To run a query within a React component, call `useAuthsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAuthsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AuthsQuery, AuthsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AuthsQuery, AuthsQueryVariables>(AuthsDocument, baseOptions);\n      }\nexport function useAuthsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AuthsQuery, AuthsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AuthsQuery, AuthsQueryVariables>(AuthsDocument, baseOptions);\n        }\nexport type AuthsQueryHookResult = ReturnType<typeof useAuthsQuery>;\nexport type AuthsLazyQueryHookResult = ReturnType<typeof useAuthsLazyQuery>;\nexport type AuthsQueryResult = ApolloReactCommon.QueryResult<AuthsQuery, AuthsQueryVariables>;\nexport const ByeDocument = gql`\n    query bye {\n  bye\n}\n    `;\n\n/**\n * __useByeQuery__\n *\n * To run a query within a React component, call `useByeQuery` and pass it any options that fit your needs.\n * When your component renders, `useByeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useByeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useByeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ByeQuery, ByeQueryVariables>) {\n        return ApolloReactHooks.useQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n      }\nexport function useByeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ByeQuery, ByeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n        }\nexport type ByeQueryHookResult = ReturnType<typeof useByeQuery>;\nexport type ByeLazyQueryHookResult = ReturnType<typeof useByeLazyQuery>;\nexport type ByeQueryResult = ApolloReactCommon.QueryResult<ByeQuery, ByeQueryVariables>;\nexport const CreatePostDocument = gql`\n    mutation createPost($id: String!, $body: String!) {\n  createPost(id: $id, body: $body)\n}\n    `;\nexport type CreatePostMutationFn = ApolloReactCommon.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      body: // value for 'body'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = ApolloReactCommon.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const FollowKeyboardDocument = gql`\n    mutation followKeyboard($id: String!) {\n  followKeyboard(id: $id)\n}\n    `;\nexport type FollowKeyboardMutationFn = ApolloReactCommon.MutationFunction<FollowKeyboardMutation, FollowKeyboardMutationVariables>;\n\n/**\n * __useFollowKeyboardMutation__\n *\n * To run a mutation, you first call `useFollowKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followKeyboardMutation, { data, loading, error }] = useFollowKeyboardMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFollowKeyboardMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FollowKeyboardMutation, FollowKeyboardMutationVariables>) {\n        return ApolloReactHooks.useMutation<FollowKeyboardMutation, FollowKeyboardMutationVariables>(FollowKeyboardDocument, baseOptions);\n      }\nexport type FollowKeyboardMutationHookResult = ReturnType<typeof useFollowKeyboardMutation>;\nexport type FollowKeyboardMutationResult = ApolloReactCommon.MutationResult<FollowKeyboardMutation>;\nexport type FollowKeyboardMutationOptions = ApolloReactCommon.BaseMutationOptions<FollowKeyboardMutation, FollowKeyboardMutationVariables>;\nexport const FollowKeyboardDeleteDocument = gql`\n    mutation followKeyboardDelete($id: String!) {\n  followKeyboardDelete(id: $id)\n}\n    `;\nexport type FollowKeyboardDeleteMutationFn = ApolloReactCommon.MutationFunction<FollowKeyboardDeleteMutation, FollowKeyboardDeleteMutationVariables>;\n\n/**\n * __useFollowKeyboardDeleteMutation__\n *\n * To run a mutation, you first call `useFollowKeyboardDeleteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowKeyboardDeleteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followKeyboardDeleteMutation, { data, loading, error }] = useFollowKeyboardDeleteMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFollowKeyboardDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FollowKeyboardDeleteMutation, FollowKeyboardDeleteMutationVariables>) {\n        return ApolloReactHooks.useMutation<FollowKeyboardDeleteMutation, FollowKeyboardDeleteMutationVariables>(FollowKeyboardDeleteDocument, baseOptions);\n      }\nexport type FollowKeyboardDeleteMutationHookResult = ReturnType<typeof useFollowKeyboardDeleteMutation>;\nexport type FollowKeyboardDeleteMutationResult = ApolloReactCommon.MutationResult<FollowKeyboardDeleteMutation>;\nexport type FollowKeyboardDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<FollowKeyboardDeleteMutation, FollowKeyboardDeleteMutationVariables>;\nexport const GenerateAuthDocument = gql`\n    mutation generateAuth($email: String!) {\n  generateAuth(email: $email)\n}\n    `;\nexport type GenerateAuthMutationFn = ApolloReactCommon.MutationFunction<GenerateAuthMutation, GenerateAuthMutationVariables>;\n\n/**\n * __useGenerateAuthMutation__\n *\n * To run a mutation, you first call `useGenerateAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useGenerateAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [generateAuthMutation, { data, loading, error }] = useGenerateAuthMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useGenerateAuthMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GenerateAuthMutation, GenerateAuthMutationVariables>) {\n        return ApolloReactHooks.useMutation<GenerateAuthMutation, GenerateAuthMutationVariables>(GenerateAuthDocument, baseOptions);\n      }\nexport type GenerateAuthMutationHookResult = ReturnType<typeof useGenerateAuthMutation>;\nexport type GenerateAuthMutationResult = ApolloReactCommon.MutationResult<GenerateAuthMutation>;\nexport type GenerateAuthMutationOptions = ApolloReactCommon.BaseMutationOptions<GenerateAuthMutation, GenerateAuthMutationVariables>;\nexport const JoinKeyboardDocument = gql`\n    mutation joinKeyboard($id: String!, $data: JoinKeyboardInput!) {\n  joinKeyboard(id: $id, data: $data)\n}\n    `;\nexport type JoinKeyboardMutationFn = ApolloReactCommon.MutationFunction<JoinKeyboardMutation, JoinKeyboardMutationVariables>;\n\n/**\n * __useJoinKeyboardMutation__\n *\n * To run a mutation, you first call `useJoinKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useJoinKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [joinKeyboardMutation, { data, loading, error }] = useJoinKeyboardMutation({\n *   variables: {\n *      id: // value for 'id'\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useJoinKeyboardMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<JoinKeyboardMutation, JoinKeyboardMutationVariables>) {\n        return ApolloReactHooks.useMutation<JoinKeyboardMutation, JoinKeyboardMutationVariables>(JoinKeyboardDocument, baseOptions);\n      }\nexport type JoinKeyboardMutationHookResult = ReturnType<typeof useJoinKeyboardMutation>;\nexport type JoinKeyboardMutationResult = ApolloReactCommon.MutationResult<JoinKeyboardMutation>;\nexport type JoinKeyboardMutationOptions = ApolloReactCommon.BaseMutationOptions<JoinKeyboardMutation, JoinKeyboardMutationVariables>;\nexport const KeyboardDocument = gql`\n    query Keyboard($shortId: String!) {\n  keyboard(shortId: $shortId) {\n    angle\n    announcement\n    brand\n    closed\n    connector\n    editions {\n      id\n      name\n      price\n      suggestedPrice\n      cases\n      plates\n    }\n    details\n    firmware\n    groupBuy\n    groupBuySoon\n    id\n    images1500\n    interestCheck\n    layouts\n    market\n    mount\n    name\n    pcb\n    shortId\n    size\n    support\n    posts {\n      id\n      body\n    }\n  }\n}\n    `;\n\n/**\n * __useKeyboardQuery__\n *\n * To run a query within a React component, call `useKeyboardQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeyboardQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeyboardQuery({\n *   variables: {\n *      shortId: // value for 'shortId'\n *   },\n * });\n */\nexport function useKeyboardQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KeyboardQuery, KeyboardQueryVariables>) {\n        return ApolloReactHooks.useQuery<KeyboardQuery, KeyboardQueryVariables>(KeyboardDocument, baseOptions);\n      }\nexport function useKeyboardLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KeyboardQuery, KeyboardQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<KeyboardQuery, KeyboardQueryVariables>(KeyboardDocument, baseOptions);\n        }\nexport type KeyboardQueryHookResult = ReturnType<typeof useKeyboardQuery>;\nexport type KeyboardLazyQueryHookResult = ReturnType<typeof useKeyboardLazyQuery>;\nexport type KeyboardQueryResult = ApolloReactCommon.QueryResult<KeyboardQuery, KeyboardQueryVariables>;\nexport const KeyboardAnnouncementDocument = gql`\n    mutation keyboardAnnouncement($id: String!, $announcement: String!) {\n  keyboardAnnouncement(id: $id, announcement: $announcement)\n}\n    `;\nexport type KeyboardAnnouncementMutationFn = ApolloReactCommon.MutationFunction<KeyboardAnnouncementMutation, KeyboardAnnouncementMutationVariables>;\n\n/**\n * __useKeyboardAnnouncementMutation__\n *\n * To run a mutation, you first call `useKeyboardAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useKeyboardAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [keyboardAnnouncementMutation, { data, loading, error }] = useKeyboardAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *      announcement: // value for 'announcement'\n *   },\n * });\n */\nexport function useKeyboardAnnouncementMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<KeyboardAnnouncementMutation, KeyboardAnnouncementMutationVariables>) {\n        return ApolloReactHooks.useMutation<KeyboardAnnouncementMutation, KeyboardAnnouncementMutationVariables>(KeyboardAnnouncementDocument, baseOptions);\n      }\nexport type KeyboardAnnouncementMutationHookResult = ReturnType<typeof useKeyboardAnnouncementMutation>;\nexport type KeyboardAnnouncementMutationResult = ApolloReactCommon.MutationResult<KeyboardAnnouncementMutation>;\nexport type KeyboardAnnouncementMutationOptions = ApolloReactCommon.BaseMutationOptions<KeyboardAnnouncementMutation, KeyboardAnnouncementMutationVariables>;\nexport const KeyboardPostsDocument = gql`\n    query keyboardPosts($shortId: String!) {\n  keyboard(shortId: $shortId) {\n    id\n    shortId\n    images600\n    name\n    posts {\n      id\n      body\n      created\n      user {\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useKeyboardPostsQuery__\n *\n * To run a query within a React component, call `useKeyboardPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeyboardPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeyboardPostsQuery({\n *   variables: {\n *      shortId: // value for 'shortId'\n *   },\n * });\n */\nexport function useKeyboardPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KeyboardPostsQuery, KeyboardPostsQueryVariables>) {\n        return ApolloReactHooks.useQuery<KeyboardPostsQuery, KeyboardPostsQueryVariables>(KeyboardPostsDocument, baseOptions);\n      }\nexport function useKeyboardPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KeyboardPostsQuery, KeyboardPostsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<KeyboardPostsQuery, KeyboardPostsQueryVariables>(KeyboardPostsDocument, baseOptions);\n        }\nexport type KeyboardPostsQueryHookResult = ReturnType<typeof useKeyboardPostsQuery>;\nexport type KeyboardPostsLazyQueryHookResult = ReturnType<typeof useKeyboardPostsLazyQuery>;\nexport type KeyboardPostsQueryResult = ApolloReactCommon.QueryResult<KeyboardPostsQuery, KeyboardPostsQueryVariables>;\nexport const KeyboardsDocument = gql`\n    query keyboards {\n  keyboards {\n    id\n    images600\n    mount\n    shortId\n    size\n    name\n  }\n}\n    `;\n\n/**\n * __useKeyboardsQuery__\n *\n * To run a query within a React component, call `useKeyboardsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeyboardsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeyboardsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useKeyboardsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KeyboardsQuery, KeyboardsQueryVariables>) {\n        return ApolloReactHooks.useQuery<KeyboardsQuery, KeyboardsQueryVariables>(KeyboardsDocument, baseOptions);\n      }\nexport function useKeyboardsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KeyboardsQuery, KeyboardsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<KeyboardsQuery, KeyboardsQueryVariables>(KeyboardsDocument, baseOptions);\n        }\nexport type KeyboardsQueryHookResult = ReturnType<typeof useKeyboardsQuery>;\nexport type KeyboardsLazyQueryHookResult = ReturnType<typeof useKeyboardsLazyQuery>;\nexport type KeyboardsQueryResult = ApolloReactCommon.QueryResult<KeyboardsQuery, KeyboardsQueryVariables>;\nexport const KeysetDocument = gql`\n    query keyset($shortId: String!) {\n  keyset(shortId: $shortId) {\n    colors {\n      id\n      hex\n      ral\n    }\n    created\n    details\n    id\n    images1500\n    kits {\n      id\n      kit\n      name\n      price\n    }\n    maker {\n      username\n    }\n    name\n    profile\n    shortId\n    stem\n  }\n}\n    `;\n\n/**\n * __useKeysetQuery__\n *\n * To run a query within a React component, call `useKeysetQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeysetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeysetQuery({\n *   variables: {\n *      shortId: // value for 'shortId'\n *   },\n * });\n */\nexport function useKeysetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KeysetQuery, KeysetQueryVariables>) {\n        return ApolloReactHooks.useQuery<KeysetQuery, KeysetQueryVariables>(KeysetDocument, baseOptions);\n      }\nexport function useKeysetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KeysetQuery, KeysetQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<KeysetQuery, KeysetQueryVariables>(KeysetDocument, baseOptions);\n        }\nexport type KeysetQueryHookResult = ReturnType<typeof useKeysetQuery>;\nexport type KeysetLazyQueryHookResult = ReturnType<typeof useKeysetLazyQuery>;\nexport type KeysetQueryResult = ApolloReactCommon.QueryResult<KeysetQuery, KeysetQueryVariables>;\nexport const KeysetsDocument = gql`\n    query keysets {\n  keysets {\n    id\n    shortId\n    name\n    profile\n    images600\n  }\n}\n    `;\n\n/**\n * __useKeysetsQuery__\n *\n * To run a query within a React component, call `useKeysetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKeysetsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKeysetsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useKeysetsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KeysetsQuery, KeysetsQueryVariables>) {\n        return ApolloReactHooks.useQuery<KeysetsQuery, KeysetsQueryVariables>(KeysetsDocument, baseOptions);\n      }\nexport function useKeysetsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KeysetsQuery, KeysetsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<KeysetsQuery, KeysetsQueryVariables>(KeysetsDocument, baseOptions);\n        }\nexport type KeysetsQueryHookResult = ReturnType<typeof useKeysetsQuery>;\nexport type KeysetsLazyQueryHookResult = ReturnType<typeof useKeysetsLazyQuery>;\nexport type KeysetsQueryResult = ApolloReactCommon.QueryResult<KeysetsQuery, KeysetsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $secret: String!) {\n  login(email: $email, secret: $secret) {\n    accessToken\n    user {\n      id\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      secret: // value for 'secret'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MakeKeyboardDocument = gql`\n    mutation makeKeyboard($data: KeyboardInput!, $images: [Upload!]!) {\n  makeKeyboard(data: $data, images: $images)\n}\n    `;\nexport type MakeKeyboardMutationFn = ApolloReactCommon.MutationFunction<MakeKeyboardMutation, MakeKeyboardMutationVariables>;\n\n/**\n * __useMakeKeyboardMutation__\n *\n * To run a mutation, you first call `useMakeKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMakeKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [makeKeyboardMutation, { data, loading, error }] = useMakeKeyboardMutation({\n *   variables: {\n *      data: // value for 'data'\n *      images: // value for 'images'\n *   },\n * });\n */\nexport function useMakeKeyboardMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MakeKeyboardMutation, MakeKeyboardMutationVariables>) {\n        return ApolloReactHooks.useMutation<MakeKeyboardMutation, MakeKeyboardMutationVariables>(MakeKeyboardDocument, baseOptions);\n      }\nexport type MakeKeyboardMutationHookResult = ReturnType<typeof useMakeKeyboardMutation>;\nexport type MakeKeyboardMutationResult = ApolloReactCommon.MutationResult<MakeKeyboardMutation>;\nexport type MakeKeyboardMutationOptions = ApolloReactCommon.BaseMutationOptions<MakeKeyboardMutation, MakeKeyboardMutationVariables>;\nexport const MakeKeysetDocument = gql`\n    mutation makeKeyset($data: KeysetInput!, $images: [Upload!]!) {\n  makeKeyset(data: $data, images: $images)\n}\n    `;\nexport type MakeKeysetMutationFn = ApolloReactCommon.MutationFunction<MakeKeysetMutation, MakeKeysetMutationVariables>;\n\n/**\n * __useMakeKeysetMutation__\n *\n * To run a mutation, you first call `useMakeKeysetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMakeKeysetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [makeKeysetMutation, { data, loading, error }] = useMakeKeysetMutation({\n *   variables: {\n *      data: // value for 'data'\n *      images: // value for 'images'\n *   },\n * });\n */\nexport function useMakeKeysetMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MakeKeysetMutation, MakeKeysetMutationVariables>) {\n        return ApolloReactHooks.useMutation<MakeKeysetMutation, MakeKeysetMutationVariables>(MakeKeysetDocument, baseOptions);\n      }\nexport type MakeKeysetMutationHookResult = ReturnType<typeof useMakeKeysetMutation>;\nexport type MakeKeysetMutationResult = ApolloReactCommon.MutationResult<MakeKeysetMutation>;\nexport type MakeKeysetMutationOptions = ApolloReactCommon.BaseMutationOptions<MakeKeysetMutation, MakeKeysetMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    username\n    keyboardjoins {\n      id\n    }\n    follows {\n      id\n      keyboard {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const SignupDocument = gql`\n    mutation signup($username: String!, $email: String!, $secret: String!) {\n  signup(username: $username, email: $email, secret: $secret)\n}\n    `;\nexport type SignupMutationFn = ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>;\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      secret: // value for 'secret'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignupMutation, SignupMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, baseOptions);\n      }\nexport type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;\nexport type SignupMutationResult = ApolloReactCommon.MutationResult<SignupMutation>;\nexport type SignupMutationOptions = ApolloReactCommon.BaseMutationOptions<SignupMutation, SignupMutationVariables>;\nexport const SortKeyboardsDocument = gql`\n    query sortKeyboards($where: SearchInput!) {\n  sortKeyboards(where: $where) {\n    id\n    shortId\n    name\n    mount\n    size\n    images600\n  }\n}\n    `;\n\n/**\n * __useSortKeyboardsQuery__\n *\n * To run a query within a React component, call `useSortKeyboardsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSortKeyboardsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSortKeyboardsQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useSortKeyboardsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SortKeyboardsQuery, SortKeyboardsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SortKeyboardsQuery, SortKeyboardsQueryVariables>(SortKeyboardsDocument, baseOptions);\n      }\nexport function useSortKeyboardsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SortKeyboardsQuery, SortKeyboardsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SortKeyboardsQuery, SortKeyboardsQueryVariables>(SortKeyboardsDocument, baseOptions);\n        }\nexport type SortKeyboardsQueryHookResult = ReturnType<typeof useSortKeyboardsQuery>;\nexport type SortKeyboardsLazyQueryHookResult = ReturnType<typeof useSortKeyboardsLazyQuery>;\nexport type SortKeyboardsQueryResult = ApolloReactCommon.QueryResult<SortKeyboardsQuery, SortKeyboardsQueryVariables>;\nexport const UpdateKeyboardDocument = gql`\n    mutation updateKeyboard($id: String!, $data: KeyboardInput!) {\n  updateKeyboard(id: $id, data: $data)\n}\n    `;\nexport type UpdateKeyboardMutationFn = ApolloReactCommon.MutationFunction<UpdateKeyboardMutation, UpdateKeyboardMutationVariables>;\n\n/**\n * __useUpdateKeyboardMutation__\n *\n * To run a mutation, you first call `useUpdateKeyboardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateKeyboardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateKeyboardMutation, { data, loading, error }] = useUpdateKeyboardMutation({\n *   variables: {\n *      id: // value for 'id'\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateKeyboardMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateKeyboardMutation, UpdateKeyboardMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateKeyboardMutation, UpdateKeyboardMutationVariables>(UpdateKeyboardDocument, baseOptions);\n      }\nexport type UpdateKeyboardMutationHookResult = ReturnType<typeof useUpdateKeyboardMutation>;\nexport type UpdateKeyboardMutationResult = ApolloReactCommon.MutationResult<UpdateKeyboardMutation>;\nexport type UpdateKeyboardMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateKeyboardMutation, UpdateKeyboardMutationVariables>;\nexport const UserDashboardDocument = gql`\n    query userDashboard {\n  me {\n    id\n    username\n    email\n    keyboards {\n      id\n      shortId\n      name\n      joins {\n        id\n      }\n      interestCheck\n      groupBuy\n      groupBuySoon\n      closed\n    }\n    keyboardjoins {\n      id\n      keyboard {\n        shortId\n        id\n        name\n      }\n    }\n    follows {\n      id\n      keyboard {\n        id\n        name\n        size\n        mount\n        shortId\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useUserDashboardQuery__\n *\n * To run a query within a React component, call `useUserDashboardQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserDashboardQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserDashboardQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserDashboardQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserDashboardQuery, UserDashboardQueryVariables>) {\n        return ApolloReactHooks.useQuery<UserDashboardQuery, UserDashboardQueryVariables>(UserDashboardDocument, baseOptions);\n      }\nexport function useUserDashboardLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserDashboardQuery, UserDashboardQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UserDashboardQuery, UserDashboardQueryVariables>(UserDashboardDocument, baseOptions);\n        }\nexport type UserDashboardQueryHookResult = ReturnType<typeof useUserDashboardQuery>;\nexport type UserDashboardLazyQueryHookResult = ReturnType<typeof useUserDashboardLazyQuery>;\nexport type UserDashboardQueryResult = ApolloReactCommon.QueryResult<UserDashboardQuery, UserDashboardQueryVariables>;\nexport const VoteKeyboardDownDocument = gql`\n    mutation voteKeyboardDown($id: String!) {\n  voteKeyboardDown(id: $id)\n}\n    `;\nexport type VoteKeyboardDownMutationFn = ApolloReactCommon.MutationFunction<VoteKeyboardDownMutation, VoteKeyboardDownMutationVariables>;\n\n/**\n * __useVoteKeyboardDownMutation__\n *\n * To run a mutation, you first call `useVoteKeyboardDownMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteKeyboardDownMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteKeyboardDownMutation, { data, loading, error }] = useVoteKeyboardDownMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useVoteKeyboardDownMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<VoteKeyboardDownMutation, VoteKeyboardDownMutationVariables>) {\n        return ApolloReactHooks.useMutation<VoteKeyboardDownMutation, VoteKeyboardDownMutationVariables>(VoteKeyboardDownDocument, baseOptions);\n      }\nexport type VoteKeyboardDownMutationHookResult = ReturnType<typeof useVoteKeyboardDownMutation>;\nexport type VoteKeyboardDownMutationResult = ApolloReactCommon.MutationResult<VoteKeyboardDownMutation>;\nexport type VoteKeyboardDownMutationOptions = ApolloReactCommon.BaseMutationOptions<VoteKeyboardDownMutation, VoteKeyboardDownMutationVariables>;\nexport const VoteKeyboardUpDocument = gql`\n    mutation voteKeyboardUp($id: String!) {\n  voteKeyboardUp(id: $id)\n}\n    `;\nexport type VoteKeyboardUpMutationFn = ApolloReactCommon.MutationFunction<VoteKeyboardUpMutation, VoteKeyboardUpMutationVariables>;\n\n/**\n * __useVoteKeyboardUpMutation__\n *\n * To run a mutation, you first call `useVoteKeyboardUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteKeyboardUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteKeyboardUpMutation, { data, loading, error }] = useVoteKeyboardUpMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useVoteKeyboardUpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<VoteKeyboardUpMutation, VoteKeyboardUpMutationVariables>) {\n        return ApolloReactHooks.useMutation<VoteKeyboardUpMutation, VoteKeyboardUpMutationVariables>(VoteKeyboardUpDocument, baseOptions);\n      }\nexport type VoteKeyboardUpMutationHookResult = ReturnType<typeof useVoteKeyboardUpMutation>;\nexport type VoteKeyboardUpMutationResult = ApolloReactCommon.MutationResult<VoteKeyboardUpMutation>;\nexport type VoteKeyboardUpMutationOptions = ApolloReactCommon.BaseMutationOptions<VoteKeyboardUpMutation, VoteKeyboardUpMutationVariables>;"]},"metadata":{},"sourceType":"module"}