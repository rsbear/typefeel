{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/rsbear/dev/typefeel/pages/_app.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Me {\\n    me {\\n      id\\n      username\\n      email\\n      keyboardjoins {\\n        id\\n        keyboardId\\n      }\\n      follows {\\n        id\\n        keyboard {\\n          id\\n          shortId\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport App from \"next/app\";\nimport React from \"react\";\nimport NextNprogress from \"nextjs-progressbar\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { Query } from \"@apollo/react-components\";\nimport { withApollo } from \"../lib/apollo\";\nimport gql from \"graphql-tag\";\nimport { Global } from \"@emotion/core\";\nimport { globalStyle } from \"../styles/main\";\nvar AUTH = gql(_templateObject());\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(MyApp, _App);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyApp).apply(this, arguments));\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          apolloClient = _this$props.apolloClient;\n      return ___EmotionJSX(ApolloProvider, {\n        client: apolloClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, ___EmotionJSX(Global, {\n        styles: globalStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), ___EmotionJSX(NextNprogress, {\n        color: \"rgba(0,0,0,.8)\",\n        height: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), ___EmotionJSX(Query, {\n        query: AUTH,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        return ___EmotionJSX(Component, _extends({\n          authUser: !loading && !error && data ? data.me : null\n        }, pageProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }));\n      }));\n    }\n  }]);\n\n  return MyApp;\n}(App);\n\nexport default withApollo(MyApp);","map":{"version":3,"sources":["/Users/rsbear/dev/typefeel/pages/_app.tsx"],"names":["App","React","NextNprogress","ApolloProvider","Query","withApollo","gql","Global","globalStyle","AUTH","MyApp","props","Component","pageProps","apolloClient","loading","error","data","me"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,UAAT;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,WAAT;AAEA,IAAMC,IAAI,GAAGH,GAAH,mBAAV;;IAqBMI,K;;;;;;;;;;;;;6BACK;AAAA,wBACwC,KAAKC,KAD7C;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBC,YADvB,eACuBA,YADvB;AAEP,aACE,cAAC,cAAD;AAAgB,QAAA,MAAM,EAAEA,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,cAAC,MAAD;AAAQ,QAAA,MAAM,EAAEN,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,cAAC,aAAD;AAAe,QAAA,KAAK,EAAC,gBAArB;AAAsC,QAAA,MAAM,EAAC,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,cAAC,KAAD;AAAO,QAAA,KAAK,EAAEC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,gBAAmC;AAAA,YAAhCM,OAAgC,QAAhCA,OAAgC;AAAA,YAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,YAAhBC,IAAgB,QAAhBA,IAAgB;AAClC,eACE,cAAC,SAAD;AACE,UAAA,QAAQ,EAAE,CAACF,OAAD,IAAY,CAACC,KAAb,IAAsBC,IAAtB,GAA6BA,IAAI,CAACC,EAAlC,GAAuC;AADnD,WAEML,SAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAMD,OARH,CAHF,CADF;AAiBD;;;;EApBiBb,G;;AAuBpB,eAAeK,UAAU,CAACK,KAAD,CAAzB","sourcesContent":["import App from \"next/app\";\nimport React from \"react\";\nimport NextNprogress from \"nextjs-progressbar\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { Query } from \"@apollo/react-components\";\nimport { withApollo } from \"lib/apollo\";\nimport gql from \"graphql-tag\";\n\nimport { Global } from \"@emotion/core\";\nimport { globalStyle } from \"styles/main\";\n\nconst AUTH = gql`\n  query Me {\n    me {\n      id\n      username\n      email\n      keyboardjoins {\n        id\n        keyboardId\n      }\n      follows {\n        id\n        keyboard {\n          id\n          shortId\n        }\n      }\n    }\n  }\n`;\n\nclass MyApp extends App<any> {\n  render() {\n    const { Component, pageProps, apolloClient } = this.props;\n    return (\n      <ApolloProvider client={apolloClient}>\n        <Global styles={globalStyle} />\n        <NextNprogress color=\"rgba(0,0,0,.8)\" height=\"3\" />\n        <Query query={AUTH}>\n          {({ loading, error, data }: any) => {\n            return (\n              <Component\n                authUser={!loading && !error && data ? data.me : null}\n                {...pageProps}\n              />\n            );\n          }}\n        </Query>\n        {/* <Component {...pageProps} /> */}\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withApollo(MyApp);\n"]},"metadata":{},"sourceType":"module"}