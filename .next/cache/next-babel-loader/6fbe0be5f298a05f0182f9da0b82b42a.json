{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/rsbear/dev/typefeel/pages/dashboard/update/keyboard/[shortId]/announcement.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport React from \"react\";\nimport Layout from \"../../../../../components/layouts/Layout\";\nimport { text } from \"../../../../../styles/text\";\nimport { useKeyboardQuery } from \"../../../../../generated/graphql\";\nimport { Formik } from \"formik\";\nimport { FormikArea } from \"../../../../../styles/inputs\";\nimport { Button } from \"../../../../../styles/buttons\";\n\nvar KeyboardMessage = function KeyboardMessage(_ref) {\n  var authUser = _ref.authUser,\n      shortId = _ref.shortId;\n\n  var _useKeyboardQuery = useKeyboardQuery({\n    variables: {\n      shortId: shortId\n    }\n  }),\n      loading = _useKeyboardQuery.loading,\n      error = _useKeyboardQuery.error,\n      data = _useKeyboardQuery.data;\n\n  var kb = !loading && data && data.keyboard;\n  return ___EmotionJSX(Layout, {\n    title: \"Announcement\",\n    authUser: authUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, loading && ___EmotionJSX(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Loading...\"), error && ___EmotionJSX(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Oops, an error occured\"), !loading && data && data.keyboard && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"h1\", {\n    css: text.heading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, kb.name, \" announcement\"), ___EmotionJSX(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Create an announcement about changes or updates to your project\"), ___EmotionJSX(Formik, {\n    initialValues: {\n      message: \"\"\n    },\n    onSubmit: function onSubmit() {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, function (_ref2) {\n    var values = _ref2.values;\n    return ___EmotionJSX(\"form\", {\n      onSubmit: function onSubmit() {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, ___EmotionJSX(FormikArea, {\n      icon: \"icon ion-ios-information-circle\",\n      margins: \"30px 0 10px 0\",\n      type: \"text\",\n      placeholder: \"Annoucement message\",\n      name: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), ___EmotionJSX(Button, {\n      primary: \"submit\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Post announcement\"));\n  })));\n};\n\nKeyboardMessage.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var shortId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            shortId = context.query.shortId;\n            return _context.abrupt(\"return\", {\n              shortId: shortId\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default KeyboardMessage;","map":{"version":3,"sources":["/Users/rsbear/dev/typefeel/pages/dashboard/update/keyboard/[shortId]/announcement.tsx"],"names":["React","Layout","text","useKeyboardQuery","Formik","FormikArea","Button","KeyboardMessage","authUser","shortId","variables","loading","error","data","kb","keyboard","heading","name","message","values","getInitialProps","context","query"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,OAAOC,MAAP;AACA,SAASC,IAAT;AAEA,SAASC,gBAAT;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAAsBC,UAAtB;AACA,SAASC,MAAT;;AAEA,IAAMC,eAA8B,GAAG,SAAjCA,eAAiC,OAA2B;AAAA,MAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAAA,0BAC/BN,gBAAgB,CAAC;AAAEO,IAAAA,SAAS,EAAE;AAAED,MAAAA,OAAO,EAAPA;AAAF;AAAb,GAAD,CADe;AAAA,MACxDE,OADwD,qBACxDA,OADwD;AAAA,MAC/CC,KAD+C,qBAC/CA,KAD+C;AAAA,MACxCC,IADwC,qBACxCA,IADwC;;AAEhE,MAAMC,EAAE,GAAG,CAACH,OAAD,IAAYE,IAAZ,IAAoBA,IAAI,CAACE,QAApC;AACA,SACE,cAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAA6B,IAAA,QAAQ,EAAEP,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGC,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFZ,EAGG,CAACD,OAAD,IAAYE,IAAZ,IAAoBA,IAAI,CAACE,QAAzB,IACC,oCACE;AAAI,IAAA,GAAG,EAAEb,IAAI,CAACc,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBF,EAAE,CAACG,IAA3B,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAFF,EAKE,cAAC,MAAD;AAAQ,IAAA,aAAa,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAvB;AAAwC,IAAA,QAAQ,EAAE,oBAAM,CAAE,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGC,MAAH,SAAGA,MAAH;AAAA,WACC;AAAM,MAAA,QAAQ,EAAE,oBAAM,CAAE,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,cAAC,UAAD;AACE,MAAA,IAAI,EAAC,iCADP;AAEE,MAAA,OAAO,EAAC,eAFV;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,WAAW,EAAC,qBAJd;AAKE,MAAA,IAAI,EAAC,SALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,cAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,QAAhB;AAAyB,MAAA,IAAI,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BARF,CADD;AAAA,GADH,CALF,CAJJ,CADF;AA8BD,CAjCD;;AAmCAZ,eAAe,CAACa,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAkC,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBZ,YAAAA,OADwB,GACZY,OAAO,CAACC,KADI,CACxBb,OADwB;AAAA,6CAEzB;AAAEA,cAAAA,OAAO,EAAPA;AAAF,aAFyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeF,eAAf","sourcesContent":["import React, { FC } from \"react\";\nimport Layout from \"components/layouts/Layout\";\nimport { text } from \"styles/text\";\nimport { GetProps } from \"interfaces/GetProps\";\nimport { useKeyboardQuery } from \"generated/graphql\";\nimport { Formik } from \"formik\";\nimport { FormikInput, FormikArea } from \"styles/inputs\";\nimport { Button } from \"styles/buttons\";\n\nconst KeyboardMessage: GetProps<any> = ({ authUser, shortId }) => {\n  const { loading, error, data } = useKeyboardQuery({ variables: { shortId } });\n  const kb = !loading && data && data.keyboard;\n  return (\n    <Layout title=\"Announcement\" authUser={authUser}>\n      {loading && <h2>Loading...</h2>}\n      {error && <h2>Oops, an error occured</h2>}\n      {!loading && data && data.keyboard && (\n        <>\n          <h1 css={text.heading}>{kb.name} announcement</h1>\n          <h4>\n            Create an announcement about changes or updates to your project\n          </h4>\n          <Formik initialValues={{ message: \"\" }} onSubmit={() => {}}>\n            {({ values }) => (\n              <form onSubmit={() => {}}>\n                <FormikArea\n                  icon=\"icon ion-ios-information-circle\"\n                  margins=\"30px 0 10px 0\"\n                  type=\"text\"\n                  placeholder=\"Annoucement message\"\n                  name=\"message\"\n                />\n                <Button primary=\"submit\" type=\"button\">\n                  Post announcement\n                </Button>\n              </form>\n            )}\n          </Formik>\n        </>\n      )}\n    </Layout>\n  );\n};\n\nKeyboardMessage.getInitialProps = async (context: any) => {\n  const { shortId } = context.query;\n  return { shortId };\n};\n\nexport default KeyboardMessage;\n"]},"metadata":{},"sourceType":"module"}