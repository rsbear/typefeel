{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/rsbear/dev/typefeel/pages/dashboard/update/keyboard/[shortId]/announcement.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport React from \"react\";\nimport Layout from \"../../../../../components/layouts/Layout\";\nimport { text } from \"../../../../../styles/text\";\nimport { useKeyboardQuery } from \"../../../../../generated/graphql\";\n\nvar KeyboardMessage = function KeyboardMessage(_ref) {\n  var authUser = _ref.authUser,\n      shortId = _ref.shortId;\n\n  var _useKeyboardQuery = useKeyboardQuery({\n    variables: {\n      shortId: shortId\n    }\n  }),\n      loading = _useKeyboardQuery.loading,\n      error = _useKeyboardQuery.error,\n      data = _useKeyboardQuery.data;\n\n  var kb = !loading && data && data.keyboard;\n  return ___EmotionJSX(Layout, {\n    title: \"Announcement\",\n    authUser: authUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, ___EmotionJSX(\"h1\", {\n    css: text.heading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, kb.name, \" announcement\"));\n};\n\nKeyboardMessage.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var shortId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            shortId = context.query.shortId;\n            return _context.abrupt(\"return\", {\n              shortId: shortId\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default KeyboardMessage;","map":{"version":3,"sources":["/Users/rsbear/dev/typefeel/pages/dashboard/update/keyboard/[shortId]/announcement.tsx"],"names":["React","Layout","text","useKeyboardQuery","KeyboardMessage","authUser","shortId","variables","loading","error","data","kb","keyboard","heading","name","getInitialProps","context","query"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,OAAOC,MAAP;AACA,SAASC,IAAT;AAEA,SAASC,gBAAT;;AAEA,IAAMC,eAA8B,GAAG,SAAjCA,eAAiC,OAA2B;AAAA,MAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAAA,0BAC/BH,gBAAgB,CAAC;AAAEI,IAAAA,SAAS,EAAE;AAAED,MAAAA,OAAO,EAAPA;AAAF;AAAb,GAAD,CADe;AAAA,MACxDE,OADwD,qBACxDA,OADwD;AAAA,MAC/CC,KAD+C,qBAC/CA,KAD+C;AAAA,MACxCC,IADwC,qBACxCA,IADwC;;AAEhE,MAAMC,EAAE,GAAG,CAACH,OAAD,IAAYE,IAAZ,IAAoBA,IAAI,CAACE,QAApC;AACA,SACE,cAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAA6B,IAAA,QAAQ,EAAEP,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,GAAG,EAAEH,IAAI,CAACW,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBF,EAAE,CAACG,IAA3B,kBADF,CADF;AAKD,CARD;;AAUAV,eAAe,CAACW,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAkC,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBV,YAAAA,OADwB,GACZU,OAAO,CAACC,KADI,CACxBX,OADwB;AAAA,6CAEzB;AAAEA,cAAAA,OAAO,EAAPA;AAAF,aAFyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeF,eAAf","sourcesContent":["import React, { FC } from \"react\";\nimport Layout from \"components/layouts/Layout\";\nimport { text } from \"styles/text\";\nimport { GetProps } from \"interfaces/GetProps\";\nimport { useKeyboardQuery } from \"generated/graphql\";\n\nconst KeyboardMessage: GetProps<any> = ({ authUser, shortId }) => {\n  const { loading, error, data } = useKeyboardQuery({ variables: { shortId } });\n  const kb = !loading && data && data.keyboard;\n  return (\n    <Layout title=\"Announcement\" authUser={authUser}>\n      <h1 css={text.heading}>{kb.name} announcement</h1>\n    </Layout>\n  );\n};\n\nKeyboardMessage.getInitialProps = async (context: any) => {\n  const { shortId } = context.query;\n  return { shortId };\n};\n\nexport default KeyboardMessage;\n"]},"metadata":{},"sourceType":"module"}